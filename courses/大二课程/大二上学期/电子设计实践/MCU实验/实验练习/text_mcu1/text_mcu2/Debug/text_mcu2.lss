
text_mcu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000072  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000524  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a6  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000194  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f5  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1c c0       	rjmp	.+56     	; 0x6e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
	int i,j;//循环变量
    *(volatile unsigned char *)(0x20+0x14)=0x01;//DDCR[0]=1
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		*(volatile unsigned char *)(0x20+0x15)=0x01;//PCRTC[0]=1
  3c:	41 e0       	ldi	r20, 0x01	; 1
  3e:	45 bb       	out	0x15, r20	; 21
  40:	24 e6       	ldi	r18, 0x64	; 100
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	05 c0       	rjmp	.+10     	; 0x50 <__SREG__+0x11>
  46:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<100;i++) for(j=0;j<1000;j++);//延时等等
  48:	f1 f7       	brne	.-4      	; 0x46 <__SREG__+0x7>
  4a:	21 50       	subi	r18, 0x01	; 1
  4c:	31 09       	sbc	r19, r1
  4e:	19 f0       	breq	.+6      	; 0x56 <__SREG__+0x17>

#include <avr/io.h>


int main(void)
{
  50:	88 ee       	ldi	r24, 0xE8	; 232
  52:	93 e0       	ldi	r25, 0x03	; 3
  54:	f8 cf       	rjmp	.-16     	; 0x46 <__SREG__+0x7>
    *(volatile unsigned char *)(0x20+0x14)=0x01;//DDCR[0]=1
    while (1) 
    {
		*(volatile unsigned char *)(0x20+0x15)=0x01;//PCRTC[0]=1
		for(i=0;i<100;i++) for(j=0;j<1000;j++);//延时等等
		*(volatile unsigned char *)(0x20+0x15)=0x00;//PCRTC[0]=0
  56:	15 ba       	out	0x15, r1	; 21
  58:	24 e6       	ldi	r18, 0x64	; 100
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	05 c0       	rjmp	.+10     	; 0x68 <__SREG__+0x29>
  5e:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<100;i++) for(j=0;j<1000;j++);//延时等等
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
  62:	21 50       	subi	r18, 0x01	; 1
  64:	31 09       	sbc	r19, r1
  66:	59 f3       	breq	.-42     	; 0x3e <__SP_H__>
{
	int i,j;//循环变量
    *(volatile unsigned char *)(0x20+0x14)=0x01;//DDCR[0]=1
    while (1) 
    {
		*(volatile unsigned char *)(0x20+0x15)=0x01;//PCRTC[0]=1
  68:	88 ee       	ldi	r24, 0xE8	; 232
  6a:	93 e0       	ldi	r25, 0x03	; 3
  6c:	f8 cf       	rjmp	.-16     	; 0x5e <__SREG__+0x1f>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
