
4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000663  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000531  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	51 c0       	rjmp	.+162    	; 0xd8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define F_CPU 1000000UL
#include <util/delay.h>

int main(void)
{
	DDRB = (1<<DDRB0);//PB0为输出模式
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(1<<DDRD1);//PB1为输入
  3c:	89 98       	cbi	0x11, 1	; 17
    while (1) 
    {
		if(PIND & (1<<PIND1)) //PINB[1]=1?
		{
			int i,j;
		DDRB = (1<<DDRB0); //PC[2~0]为输出
  3e:	e1 e0       	ldi	r30, 0x01	; 1
	DDRB = (1<<DDRB0);//PB0为输出模式
	DDRD &= ~(1<<DDRD1);//PB1为输入
    /* Replace with your application code */
    while (1) 
    {
		if(PIND & (1<<PIND1)) //PINB[1]=1?
  40:	81 9b       	sbis	0x10, 1	; 16
  42:	48 c0       	rjmp	.+144    	; 0xd4 <__SREG__+0x95>
		{
			int i,j;
		DDRB = (1<<DDRB0); //PC[2~0]为输出
  44:	e7 bb       	out	0x17, r30	; 23
  46:	64 e6       	ldi	r22, 0x64	; 100
  48:	70 e0       	ldi	r23, 0x00	; 0
		for(i=0;i<100;i++)//渐亮
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
		{ PORTB |= (1<<PORTB0);//PC[0]=1
  4e:	c0 9a       	sbi	0x18, 0	; 24
			for(j=0;j<=i;j++)_delay_us(150);
  50:	33 23       	and	r19, r19
  52:	4c f0       	brlt	.+18     	; 0x66 <__SREG__+0x27>
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	42 e3       	ldi	r20, 0x32	; 50
  5a:	4a 95       	dec	r20
  5c:	f1 f7       	brne	.-4      	; 0x5a <__SREG__+0x1b>
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	28 17       	cp	r18, r24
  62:	39 07       	cpc	r19, r25
  64:	cc f7       	brge	.-14     	; 0x58 <__SREG__+0x19>
			PORTB &= ~(1<<PORTB0);//PC[0]=0
  66:	c0 98       	cbi	0x18, 0	; 24
			for(j=0;j<100-i;j++)_delay_us(150);
  68:	ab 01       	movw	r20, r22
  6a:	16 16       	cp	r1, r22
  6c:	17 06       	cpc	r1, r23
  6e:	4c f4       	brge	.+18     	; 0x82 <__SREG__+0x43>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	f2 e3       	ldi	r31, 0x32	; 50
  76:	fa 95       	dec	r31
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	84 17       	cp	r24, r20
  7e:	95 07       	cpc	r25, r21
  80:	c9 f7       	brne	.-14     	; 0x74 <__SREG__+0x35>
    {
		if(PIND & (1<<PIND1)) //PINB[1]=1?
		{
			int i,j;
		DDRB = (1<<DDRB0); //PC[2~0]为输出
		for(i=0;i<100;i++)//渐亮
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	3f 4f       	sbci	r19, 0xFF	; 255
  86:	61 50       	subi	r22, 0x01	; 1
  88:	71 09       	sbc	r23, r1
  8a:	09 f7       	brne	.-62     	; 0x4e <__SREG__+0xf>
  8c:	24 e6       	ldi	r18, 0x64	; 100
  8e:	30 e0       	ldi	r19, 0x00	; 0
			for(j=0;j<=i;j++)_delay_us(150);
			PORTB &= ~(1<<PORTB0);//PC[0]=0
			for(j=0;j<100-i;j++)_delay_us(150);
		}
		for(i=100;i>0;i--)//渐暗
		{ PORTB |= (1<<PORTB0);//PC[0]=1
  90:	c0 9a       	sbi	0x18, 0	; 24
			for(j=0;j<=i;j++)_delay_us(150);
  92:	33 23       	and	r19, r19
  94:	4c f0       	brlt	.+18     	; 0xa8 <__SREG__+0x69>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	42 e3       	ldi	r20, 0x32	; 50
  9c:	4a 95       	dec	r20
  9e:	f1 f7       	brne	.-4      	; 0x9c <__SREG__+0x5d>
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	28 17       	cp	r18, r24
  a4:	39 07       	cpc	r19, r25
  a6:	cc f7       	brge	.-14     	; 0x9a <__SREG__+0x5b>
			PORTB &= ~(1<<PORTB0);//PC[0]=0
  a8:	c0 98       	cbi	0x18, 0	; 24
			for(j=0;j<100-i;j++)_delay_us(150);
  aa:	ab 01       	movw	r20, r22
  ac:	16 16       	cp	r1, r22
  ae:	17 06       	cpc	r1, r23
  b0:	4c f4       	brge	.+18     	; 0xc4 <__SREG__+0x85>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	f2 e3       	ldi	r31, 0x32	; 50
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__SREG__+0x79>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	84 17       	cp	r24, r20
  c0:	95 07       	cpc	r25, r21
  c2:	c9 f7       	brne	.-14     	; 0xb6 <__SREG__+0x77>
		{ PORTB |= (1<<PORTB0);//PC[0]=1
			for(j=0;j<=i;j++)_delay_us(150);
			PORTB &= ~(1<<PORTB0);//PC[0]=0
			for(j=0;j<100-i;j++)_delay_us(150);
		}
		for(i=100;i>0;i--)//渐暗
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	21 15       	cp	r18, r1
  ce:	31 05       	cpc	r19, r1
  d0:	f9 f6       	brne	.-66     	; 0x90 <__SREG__+0x51>
  d2:	b6 cf       	rjmp	.-148    	; 0x40 <__SREG__+0x1>
			PORTB &= ~(1<<PORTB0);//PC[0]=0
			for(j=0;j<100-i;j++)_delay_us(150);
		}
		}
		else
		PORTB &= ~(1<<PORTB0); //PORTC[0]=0
  d4:	c0 98       	cbi	0x18, 0	; 24
  d6:	b4 cf       	rjmp	.-152    	; 0x40 <__SREG__+0x1>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
