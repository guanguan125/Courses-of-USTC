
520.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000a04  00000a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008c  0080008c  00000ac4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001192  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000854  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cba  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000402a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e0       	ldi	r30, 0x04	; 4
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 38       	cpi	r26, 0x8C	; 140
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e8       	ldi	r26, 0x8C	; 140
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 38       	cpi	r26, 0x8D	; 141
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2e d1       	rcall	.+604    	; 0x2b6 <main>
  5a:	d2 c4       	rjmp	.+2468   	; 0xa00 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <TWI_Init>:
void LCD_Set_Cursor_Location(unsigned char row,unsigned char col)
//设置光标位置,row:0~1,col:0~39
{ unsigned char offset[]={0x0,0x40}; LCD_8Bit_Write(LCD_SETDDRAMADDR|(col+offset[row]),0);
}
void LCD_Write_NewChar(char c_data)//在当前位置显示
{ LCD_8Bit_Write(c_data,1);
  5e:	11 b8       	out	0x01, r1	; 1
  60:	82 e0       	ldi	r24, 0x02	; 2
  62:	80 b9       	out	0x00, r24	; 0
  64:	84 e0       	ldi	r24, 0x04	; 4
  66:	86 bf       	out	0x36, r24	; 54
  68:	08 95       	ret

0000006a <TWI_Start>:
  6a:	84 ea       	ldi	r24, 0xA4	; 164
  6c:	86 bf       	out	0x36, r24	; 54
  6e:	06 b6       	in	r0, 0x36	; 54
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <TWI_Start+0x4>
  74:	08 95       	ret

00000076 <TWI_Write>:
  76:	83 b9       	out	0x03, r24	; 3
  78:	84 e8       	ldi	r24, 0x84	; 132
  7a:	86 bf       	out	0x36, r24	; 54
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <TWI_Write+0x6>
  82:	08 95       	ret

00000084 <TWI_Write_LCD>:
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
  88:	f0 df       	rcall	.-32     	; 0x6a <TWI_Start>
  8a:	81 b1       	in	r24, 0x01	; 1
  8c:	88 7f       	andi	r24, 0xF8	; 248
  8e:	88 30       	cpi	r24, 0x08	; 8
  90:	89 f4       	brne	.+34     	; 0xb4 <TWI_Write_LCD+0x30>
  92:	8e e4       	ldi	r24, 0x4E	; 78
  94:	f0 df       	rcall	.-32     	; 0x76 <TWI_Write>
  96:	81 b1       	in	r24, 0x01	; 1
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	88 31       	cpi	r24, 0x18	; 24
  9c:	69 f4       	brne	.+26     	; 0xb8 <TWI_Write_LCD+0x34>
  9e:	8c 2f       	mov	r24, r28
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	e9 df       	rcall	.-46     	; 0x76 <TWI_Write>
  a4:	81 b1       	in	r24, 0x01	; 1
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	88 32       	cpi	r24, 0x28	; 40
  aa:	41 f4       	brne	.+16     	; 0xbc <TWI_Write_LCD+0x38>
  ac:	84 e9       	ldi	r24, 0x94	; 148
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	05 c0       	rjmp	.+10     	; 0xbe <TWI_Write_LCD+0x3a>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	03 c0       	rjmp	.+6      	; 0xbe <TWI_Write_LCD+0x3a>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	01 c0       	rjmp	.+2      	; 0xbe <TWI_Write_LCD+0x3a>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <LCD_4Bit_Write>:
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
  c6:	de df       	rcall	.-68     	; 0x84 <TWI_Write_LCD>
  c8:	00 00       	nop
  ca:	8c 2f       	mov	r24, r28
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	da df       	rcall	.-76     	; 0x84 <TWI_Write_LCD>
  d0:	00 00       	nop
  d2:	8c 2f       	mov	r24, r28
  d4:	8b 7f       	andi	r24, 0xFB	; 251
  d6:	d6 df       	rcall	.-84     	; 0x84 <TWI_Write_LCD>
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_4Bit_Write+0x18>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_4Bit_Write+0x1e>
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_8Bit_Write>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c8 2f       	mov	r28, r24
  ea:	d6 2f       	mov	r29, r22
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	86 2b       	or	r24, r22
  f0:	e8 df       	rcall	.-48     	; 0xc2 <LCD_4Bit_Write>
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	c2 9f       	mul	r28, r18
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	8d 2b       	or	r24, r29
  fc:	e2 df       	rcall	.-60     	; 0xc2 <LCD_4Bit_Write>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_Init>:
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Init+0x4>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Init+0xa>
 10e:	00 00       	nop
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	d7 df       	rcall	.-82     	; 0xc2 <LCD_4Bit_Write>
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Init+0x14>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Init+0x1a>
 11e:	00 00       	nop
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	cf df       	rcall	.-98     	; 0xc2 <LCD_4Bit_Write>
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	94 e0       	ldi	r25, 0x04	; 4
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x24>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0x2a>
 12e:	00 00       	nop
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	c7 df       	rcall	.-114    	; 0xc2 <LCD_4Bit_Write>
 134:	92 e3       	ldi	r25, 0x32	; 50
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x32>
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	c2 df       	rcall	.-124    	; 0xc2 <LCD_4Bit_Write>
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	d0 df       	rcall	.-96     	; 0xe4 <LCD_8Bit_Write>
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	cd df       	rcall	.-102    	; 0xe4 <LCD_8Bit_Write>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	ca df       	rcall	.-108    	; 0xe4 <LCD_8Bit_Write>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x50>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x56>
 15a:	00 00       	nop
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	c1 df       	rcall	.-126    	; 0xe4 <LCD_8Bit_Write>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	be df       	rcall	.-132    	; 0xe4 <LCD_8Bit_Write>
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x68>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x6e>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Set_Cursor_Location>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	00 d0       	rcall	.+0      	; 0x17c <LCD_Set_Cursor_Location+0x6>
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	19 82       	std	Y+1, r1	; 0x01
 182:	90 e4       	ldi	r25, 0x40	; 64
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	fe 01       	movw	r30, r28
 188:	e8 0f       	add	r30, r24
 18a:	f1 1d       	adc	r31, r1
 18c:	81 81       	ldd	r24, Z+1	; 0x01
 18e:	86 0f       	add	r24, r22
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 68       	ori	r24, 0x80	; 128
 194:	a7 df       	rcall	.-178    	; 0xe4 <LCD_8Bit_Write>
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <LCD_Write_Char>:
}
void LCD_Write_Char(unsigned char row,unsigned char col,char c_data)
//在指定位置显示
{ LCD_Set_Cursor_Location(row,col); LCD_8Bit_Write(c_data,1);
 1a0:	cf 93       	push	r28
 1a2:	c4 2f       	mov	r28, r20
 1a4:	e8 df       	rcall	.-48     	; 0x176 <LCD_Set_Cursor_Location>
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	9c df       	rcall	.-200    	; 0xe4 <LCD_8Bit_Write>
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_Write_String>:
void LCD_Write_String(unsigned char row,unsigned char col,const char *pStr)
//在指定位置显示串
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ea 01       	movw	r28, r20
	LCD_Set_Cursor_Location(row,col);
 1b6:	df df       	rcall	.-66     	; 0x176 <LCD_Set_Cursor_Location>
	while((*pStr) != '\0')
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <LCD_Write_String+0x1a>
 1be:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_8Bit_Write(*pStr,1);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	90 df       	rcall	.-224    	; 0xe4 <LCD_8Bit_Write>
}
void LCD_Write_String(unsigned char row,unsigned char col,const char *pStr)
//在指定位置显示串
{
	LCD_Set_Cursor_Location(row,col);
	while((*pStr) != '\0')
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <LCD_Write_String+0x10>
	{
		LCD_8Bit_Write(*pStr,1);
		pStr ++;
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <HCSR04_Run>:
#include <util/delay.h>
unsigned int HCSR04_Run(void)
{ unsigned int i_cnt=0;//统计echo的高电平(固定时钟下的次数)
	unsigned int uc_cnt=1;//超时计数（统计在一定时间内没有响应）
	/*为了测量的准确，如系统中使用了中断，这里要禁止中断 cli(); */
	DDRD |= (1<<DDRD6);//PD6为输出（到HC_SR04的Trig管脚）
 1d0:	8e 9a       	sbi	0x11, 6	; 17
	DDRD &= ~(1<<DDRD5);//PD5为输入（来自HC_SR04的Echo管脚）
 1d2:	8d 98       	cbi	0x11, 5	; 17
	PORTD |=(1<<PORTD6);//PD6输出高电平到Trig告诉HC_SR04准备发送超声波
 1d4:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <HCSR04_Run+0x8>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <HCSR04_Run+0xe>
	_delay_us(20);//持续20us(>10us)
	PORTD &=~(1<<PORTD6);//PD6输出低电平到Trig结束通知
 1de:	96 98       	cbi	0x12, 6	; 18
	while((PIND&(1<<PIND5))==0) //等待Echo为高电平(即收到超声回波)
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	93 e2       	ldi	r25, 0x23	; 35
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <HCSR04_Run+0x24>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
	{ uc_cnt++; if(uc_cnt>9000)break;//计数溢出：超时，跳过
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <HCSR04_Run+0x24>
	}
	i_cnt = 2;//统计Echo的初值=检测到echo信号+循环的判断约2个CPU时钟周期
	while((PIND&(1<<PIND5))!=0)//继续统计ECHO信号高电平的持续时间
 1ea:	85 99       	sbic	0x10, 5	; 16
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <HCSR04_Run+0x2a>
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <HCSR04_Run+0x36>
	DDRD |= (1<<DDRD6);//PD6为输出（到HC_SR04的Trig管脚）
	DDRD &= ~(1<<DDRD5);//PD5为输入（来自HC_SR04的Echo管脚）
	PORTD |=(1<<PORTD6);//PD6输出高电平到Trig告诉HC_SR04准备发送超声波
	_delay_us(20);//持续20us(>10us)
	PORTD &=~(1<<PORTD6);//PD6输出低电平到Trig结束通知
	while((PIND&(1<<PIND5))==0) //等待Echo为高电平(即收到超声回波)
 1f4:	85 9b       	sbis	0x10, 5	; 16
 1f6:	f7 cf       	rjmp	.-18     	; 0x1e6 <HCSR04_Run+0x16>
 1f8:	f8 cf       	rjmp	.-16     	; 0x1ea <HCSR04_Run+0x1a>
	{ uc_cnt++; if(uc_cnt>9000)break;//计数溢出：超时，跳过
	}
	i_cnt = 2;//统计Echo的初值=检测到echo信号+循环的判断约2个CPU时钟周期
	while((PIND&(1<<PIND5))!=0)//继续统计ECHO信号高电平的持续时间
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	70 e0       	ldi	r23, 0x00	; 0
	i_cnt++;//每次=数据加载+&运算+判断+循环+加约5个时钟周期（默认1MHz）
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
	PORTD &=~(1<<PORTD6);//PD6输出低电平到Trig结束通知
	while((PIND&(1<<PIND5))==0) //等待Echo为高电平(即收到超声回波)
	{ uc_cnt++; if(uc_cnt>9000)break;//计数溢出：超时，跳过
	}
	i_cnt = 2;//统计Echo的初值=检测到echo信号+循环的判断约2个CPU时钟周期
	while((PIND&(1<<PIND5))!=0)//继续统计ECHO信号高电平的持续时间
 202:	85 99       	sbic	0x10, 5	; 16
 204:	fc cf       	rjmp	.-8      	; 0x1fe <HCSR04_Run+0x2e>
	i_cnt++;//每次=数据加载+&运算+判断+循环+加约5个时钟周期（默认1MHz）
	/*若之前禁用了中断，这里可以开中断了 sei();*/
	return(i_cnt*5.0/100.0*17.0);//返回距离，单位mm
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	d5 d2       	rcall	.+1450   	; 0x7b6 <__floatunsisf>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 ea       	ldi	r20, 0xA0	; 160
 212:	50 e4       	ldi	r21, 0x40	; 64
 214:	62 d3       	rcall	.+1732   	; 0x8da <__mulsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	48 ec       	ldi	r20, 0xC8	; 200
 21c:	52 e4       	ldi	r21, 0x42	; 66
 21e:	37 d2       	rcall	.+1134   	; 0x68e <__divsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	48 e8       	ldi	r20, 0x88	; 136
 226:	51 e4       	ldi	r21, 0x41	; 65
 228:	58 d3       	rcall	.+1712   	; 0x8da <__mulsf3>
 22a:	99 d2       	rcall	.+1330   	; 0x75e <__fixunssfsi>
}
 22c:	cb 01       	movw	r24, r22
 22e:	08 95       	ret

00000230 <run_stepper>:
/* 28BYJ-48步进电机的控制函数，其参数的作用为：
* phase:选择步进电机的驱动方式，0：8拍，1：双4拍，2：单4拍
* dir:步进电机的转动方向，0：顺时针，1：逆时针
* step:控制步进电机转动多少步（多少个脉冲），0~65535*/
void run_stepper(unsigned char phase,unsigned char dir,unsigned int step)
{ unsigned char ph = phase ? 0x03:0x07;//驱动方式，确定脉冲的选择增量
 230:	cf 93       	push	r28
 232:	da 01       	movw	r26, r20
 234:	81 11       	cpse	r24, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <run_stepper+0xc>
 238:	47 e0       	ldi	r20, 0x07	; 7
 23a:	01 c0       	rjmp	.+2      	; 0x23e <run_stepper+0xe>
 23c:	43 e0       	ldi	r20, 0x03	; 3
	unsigned char inc = dir ?0x01:ph; /*逆时针增量为1，顺时针 4拍为3,8拍为7*/
 23e:	61 11       	cpse	r22, r1
 240:	02 c0       	rjmp	.+4      	; 0x246 <run_stepper+0x16>
 242:	c4 2f       	mov	r28, r20
 244:	01 c0       	rjmp	.+2      	; 0x248 <run_stepper+0x18>
 246:	c1 e0       	ldi	r28, 0x01	; 1
	unsigned int i;//定义循环变量i
	DDRC |=(1<<DDRC3)|(1<<DDRC2)|(1<<DDRC1)|(1<<DDRC0);//PC输出
 248:	94 b3       	in	r25, 0x14	; 20
 24a:	9f 60       	ori	r25, 0x0F	; 15
 24c:	94 bb       	out	0x14, r25	; 20
	for(i=0;i<step;i++)//输出step个脉冲步
 24e:	10 97       	sbiw	r26, 0x00	; 0
 250:	49 f1       	breq	.+82     	; 0x2a4 <run_stepper+0x74>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
	{ stepper_index += inc;//通过增量调整，不断地切换输出脉冲
		stepper_index &= ph; //去掉递增后的无效高位值
		PORTC &=0xf0; //选择相应的控制脉冲通过端口C进行输出
		PORTC |= stepper_ph[phase][stepper_index];
 256:	68 2f       	mov	r22, r24
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	6c 58       	subi	r22, 0x8C	; 140
 268:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned char inc = dir ?0x01:ph; /*逆时针增量为1，顺时针 4拍为3,8拍为7*/
	unsigned int i;//定义循环变量i
	DDRC |=(1<<DDRC3)|(1<<DDRC2)|(1<<DDRC1)|(1<<DDRC0);//PC输出
	for(i=0;i<step;i++)//输出step个脉冲步
	{ stepper_index += inc;//通过增量调整，不断地切换输出脉冲
		stepper_index &= ph; //去掉递增后的无效高位值
 26a:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <__data_end>
 26e:	9c 0f       	add	r25, r28
 270:	94 23       	and	r25, r20
 272:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <__data_end>
		PORTC &=0xf0; //选择相应的控制脉冲通过端口C进行输出
 276:	95 b3       	in	r25, 0x15	; 21
 278:	90 7f       	andi	r25, 0xF0	; 240
 27a:	95 bb       	out	0x15, r25	; 21
		PORTC |= stepper_ph[phase][stepper_index];
 27c:	55 b3       	in	r21, 0x15	; 21
 27e:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <__data_end>
 282:	fb 01       	movw	r30, r22
 284:	e9 0f       	add	r30, r25
 286:	f1 1d       	adc	r31, r1
 288:	90 81       	ld	r25, Z
 28a:	95 2b       	or	r25, r21
 28c:	95 bb       	out	0x15, r25	; 21
 28e:	80 ee       	ldi	r24, 0xE0	; 224
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <run_stepper+0x62>
 296:	00 c0       	rjmp	.+0      	; 0x298 <run_stepper+0x68>
 298:	00 00       	nop
void run_stepper(unsigned char phase,unsigned char dir,unsigned int step)
{ unsigned char ph = phase ? 0x03:0x07;//驱动方式，确定脉冲的选择增量
	unsigned char inc = dir ?0x01:ph; /*逆时针增量为1，顺时针 4拍为3,8拍为7*/
	unsigned int i;//定义循环变量i
	DDRC |=(1<<DDRC3)|(1<<DDRC2)|(1<<DDRC1)|(1<<DDRC0);//PC输出
	for(i=0;i<step;i++)//输出step个脉冲步
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	a2 17       	cp	r26, r18
 2a0:	b3 07       	cpc	r27, r19
 2a2:	19 f7       	brne	.-58     	; 0x26a <run_stepper+0x3a>
	{ stepper_index += inc;//通过增量调整，不断地切换输出脉冲
		stepper_index &= ph; //去掉递增后的无效高位值
		PORTC &=0xf0; //选择相应的控制脉冲通过端口C进行输出
		PORTC |= stepper_ph[phase][stepper_index];
		_delay_us(900);//8拍 _delay_us(1600);//双4拍//_delay_us(2000);//单四拍
	} }
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <ADC_Init>:
#define F_CPU 1000000UL
#include "twi_lcd.h"
#include "hc_sr04.h"
#include "m_28byj48.h"
void ADC_Init(unsigned char adc_ch)//ADC初始化，低4bit,adc0~7:0~7
{ ADMUX = (1<<REFS0)|(adc_ch & 0x0f);//参考电压：AVCC，低4bit为通道选择
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADFR)|(1<<ADPS1)|(1<<ADPS0);//开启ADC，连续模式,右对齐，
 2ae:	83 ea       	ldi	r24, 0xA3	; 163
 2b0:	86 b9       	out	0x06, r24	; 6
	//预分频8，1000/8=125kHz
	ADCSRA |=(1<<ADSC);//ADC开始转换
 2b2:	36 9a       	sbi	0x06, 6	; 6
 2b4:	08 95       	ret

000002b6 <main>:
}
int main(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	2c 97       	sbiw	r28, 0x0c	; 12
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned int distance=0;
	unsigned char i=15,uc_d=0,j=0;
	unsigned int n,m;
	unsigned int high,low,y;
	TWI_Init(); LCD_Init();
 2ca:	c9 de       	rcall	.-622    	; 0x5e <TWI_Init>
 2cc:	1b df       	rcall	.-458    	; 0x104 <LCD_Init>
    DDRD |= (1<<DDRD2)|(1<<DDRD1)|(1<<DDRD0);
 2ce:	81 b3       	in	r24, 0x11	; 17
 2d0:	87 60       	ori	r24, 0x07	; 7
 2d2:	81 bb       	out	0x11, r24	; 17
	DDRD &=~(1<<DDRD0);//输入：通过PD0连接到电源正极或负极进行正反转选择
 2d4:	88 98       	cbi	0x11, 0	; 17
	PORTD |=(1<<PORTD0); //内部上拉
 2d6:	90 9a       	sbi	0x12, 0	; 18
	unsigned char adc_dh,adc_dl;
	//用于存储adch/l寄存器里的数据
	float adc_result;//adc采集结果
	unsigned char dh,uc_int,uc_display[8];//临时变量
	LCD_Init();
 2d8:	15 df       	rcall	.-470    	; 0x104 <LCD_Init>
	ADC_Init(6); //初始化adc，对ADC6（PC6）采样，参考电压…
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	e5 df       	rcall	.-54     	; 0x2a8 <ADC_Init>
    while (1)
    { 
		PORTD = (1<<PORTD2);//only red on
 2de:	68 94       	set
 2e0:	88 24       	eor	r8, r8
 2e2:	82 f8       	bld	r8, 2
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD1);//only green on
 2e4:	68 94       	set
 2e6:	55 24       	eor	r5, r5
 2e8:	51 f8       	bld	r5, 1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD0);//only blue on
 2ea:	ff 24       	eor	r15, r15
 2ec:	f3 94       	inc	r15
			else
			LCD_Write_String(1,0,"NOT");
		i--; distance /=10;}
		while(i>8) //高位没有数字时不显示
		{ 
			LCD_Write_Char(0,i,0x20);i--;
 2ee:	68 94       	set
 2f0:	99 24       	eor	r9, r9
 2f2:	95 f8       	bld	r9, 5
 2f4:	5e 01       	movw	r10, r28
 2f6:	29 e0       	ldi	r18, 0x09	; 9
 2f8:	a2 0e       	add	r10, r18
 2fa:	b1 1c       	adc	r11, r1
		uc_int = (unsigned char) adc_result;//取整数
		adc_result -=uc_int;//取小数
		dh=2;//整数占2位
		uc_display[3]=0x30;//初始整数为0
		while(uc_int > 0 && dh >0)
		{ uc_display[dh--]=uc_int%10+0x30;//最低位数字转换成字符
 2fc:	0f 2e       	mov	r0, r31
 2fe:	fd ec       	ldi	r31, 0xCD	; 205
 300:	ef 2e       	mov	r14, r31
 302:	f0 2d       	mov	r31, r0
		uc_int/=10;/*去掉整数的最低位*/}
		uc_display[3]='.';//小数点
 304:	0f 2e       	mov	r0, r31
 306:	fe e2       	ldi	r31, 0x2E	; 46
 308:	6f 2e       	mov	r6, r31
 30a:	f0 2d       	mov	r31, r0
 30c:	6e 01       	movw	r12, r28
 30e:	38 e0       	ldi	r19, 0x08	; 8
 310:	c3 0e       	add	r12, r19
 312:	d1 1c       	adc	r13, r1
	unsigned char dh,uc_int,uc_display[8];//临时变量
	LCD_Init();
	ADC_Init(6); //初始化adc，对ADC6（PC6）采样，参考电压…
    while (1)
    { 
		PORTD = (1<<PORTD2);//only red on
 314:	82 ba       	out	0x12, r8	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	8f e9       	ldi	r24, 0x9F	; 159
 318:	96 e8       	ldi	r25, 0x86	; 134
 31a:	e1 e0       	ldi	r30, 0x01	; 1
 31c:	81 50       	subi	r24, 0x01	; 1
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e0 40       	sbci	r30, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x66>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x70>
 326:	00 00       	nop
 328:	24 e6       	ldi	r18, 0x64	; 100
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	05 c0       	rjmp	.+10     	; 0x338 <main+0x82>
 32e:	01 97       	sbiw	r24, 0x01	; 1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x78>
 332:	21 50       	subi	r18, 0x01	; 1
 334:	31 09       	sbc	r19, r1
	ADC_Init(6); //初始化adc，对ADC6（PC6）采样，参考电压…
    while (1)
    { 
		PORTD = (1<<PORTD2);//only red on
	    _delay_ms(500);
	    for(n=0;n<100;n++)
 336:	19 f0       	breq	.+6      	; 0x33e <main+0x88>
	ADCSRA = (1<<ADEN)|(1<<ADFR)|(1<<ADPS1)|(1<<ADPS0);//开启ADC，连续模式,右对齐，
	//预分频8，1000/8=125kHz
	ADCSRA |=(1<<ADSC);//ADC开始转换
}
int main(void)
{
 338:	88 ee       	ldi	r24, 0xE8	; 232
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	f8 cf       	rjmp	.-16     	; 0x32e <main+0x78>
    { 
		PORTD = (1<<PORTD2);//only red on
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD1);//only green on
 33e:	52 ba       	out	0x12, r5	; 18
 340:	ff e9       	ldi	r31, 0x9F	; 159
 342:	26 e8       	ldi	r18, 0x86	; 134
 344:	31 e0       	ldi	r19, 0x01	; 1
 346:	f1 50       	subi	r31, 0x01	; 1
 348:	20 40       	sbci	r18, 0x00	; 0
 34a:	30 40       	sbci	r19, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x90>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x9a>
 350:	00 00       	nop
 352:	24 e6       	ldi	r18, 0x64	; 100
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	05 c0       	rjmp	.+10     	; 0x362 <main+0xac>
 358:	01 97       	sbiw	r24, 0x01	; 1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0xa2>
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	31 09       	sbc	r19, r1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD1);//only green on
	    _delay_ms(500);
	    for(n=0;n<100;n++)
 360:	19 f0       	breq	.+6      	; 0x368 <main+0xb2>
 362:	88 ee       	ldi	r24, 0xE8	; 232
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	f8 cf       	rjmp	.-16     	; 0x358 <main+0xa2>
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD0);//only blue on
 368:	f2 ba       	out	0x12, r15	; 18
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	96 e8       	ldi	r25, 0x86	; 134
 36e:	e1 e0       	ldi	r30, 0x01	; 1
 370:	81 50       	subi	r24, 0x01	; 1
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e0 40       	sbci	r30, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0xba>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0xc4>
 37a:	00 00       	nop
 37c:	24 e6       	ldi	r18, 0x64	; 100
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	05 c0       	rjmp	.+10     	; 0x38c <main+0xd6>
 382:	01 97       	sbiw	r24, 0x01	; 1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0xcc>
 386:	21 50       	subi	r18, 0x01	; 1
 388:	31 09       	sbc	r19, r1
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
	    PORTD = (1<<PORTD0);//only blue on
	    _delay_ms(500);
	    for(n=0;n<100;n++)
 38a:	19 f0       	breq	.+6      	; 0x392 <main+0xdc>
 38c:	88 ee       	ldi	r24, 0xE8	; 232
 38e:	93 e0       	ldi	r25, 0x03	; 3
 390:	f8 cf       	rjmp	.-16     	; 0x382 <main+0xcc>
	    for(m=0;m<1000;m++);
		distance = HCSR04_Run();
 392:	1e df       	rcall	.-452    	; 0x1d0 <HCSR04_Run>
 394:	8c 01       	movw	r16, r24
		LCD_Write_String(0,0,"Distance:");
 396:	40 e6       	ldi	r20, 0x60	; 96
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 df       	rcall	.-496    	; 0x1b0 <LCD_Write_String>
		i=15; //从最低位开始转换和显示，最多7位
		while(distance>0)
 3a0:	01 15       	cp	r16, r1
 3a2:	11 05       	cpc	r17, r1
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <main+0xf2>
 3a6:	43 c0       	rjmp	.+134    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3a8:	0f 2e       	mov	r0, r31
 3aa:	ff e0       	ldi	r31, 0x0F	; 15
 3ac:	7f 2e       	mov	r7, r31
 3ae:	f0 2d       	mov	r31, r0
		{ uc_d = distance % 10+0x30;
			LCD_Write_Char(0,i,uc_d);
 3b0:	98 01       	movw	r18, r16
 3b2:	ad ec       	ldi	r26, 0xCD	; 205
 3b4:	bc ec       	ldi	r27, 0xCC	; 204
 3b6:	18 d3       	rcall	.+1584   	; 0x9e8 <__umulhisi3>
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	9c 01       	movw	r18, r24
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	82 0f       	add	r24, r18
 3d8:	93 1f       	adc	r25, r19
 3da:	98 01       	movw	r18, r16
 3dc:	28 1b       	sub	r18, r24
 3de:	39 0b       	sbc	r19, r25
 3e0:	40 e3       	ldi	r20, 0x30	; 48
 3e2:	42 0f       	add	r20, r18
 3e4:	67 2d       	mov	r22, r7
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	db de       	rcall	.-586    	; 0x1a0 <LCD_Write_Char>
			if(distance<10000)
 3ea:	00 31       	cpi	r16, 0x10	; 16
 3ec:	37 e2       	ldi	r19, 0x27	; 39
 3ee:	13 07       	cpc	r17, r19
 3f0:	30 f4       	brcc	.+12     	; 0x3fe <main+0x148>
			LCD_Write_String(1,4,"Close");
 3f2:	4a e6       	ldi	r20, 0x6A	; 106
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	68 2d       	mov	r22, r8
 3f8:	8f 2d       	mov	r24, r15
 3fa:	da de       	rcall	.-588    	; 0x1b0 <LCD_Write_String>
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			else
			LCD_Write_String(1,0,"NOT");
 3fe:	40 e7       	ldi	r20, 0x70	; 112
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	8f 2d       	mov	r24, r15
 406:	d4 de       	rcall	.-600    	; 0x1b0 <LCD_Write_String>
		i--; distance /=10;}
 408:	7a 94       	dec	r7
 40a:	98 01       	movw	r18, r16
 40c:	ad ec       	ldi	r26, 0xCD	; 205
 40e:	bc ec       	ldi	r27, 0xCC	; 204
 410:	eb d2       	rcall	.+1494   	; 0x9e8 <__umulhisi3>
 412:	8c 01       	movw	r16, r24
 414:	16 95       	lsr	r17
 416:	07 95       	ror	r16
 418:	16 95       	lsr	r17
 41a:	07 95       	ror	r16
 41c:	16 95       	lsr	r17
 41e:	07 95       	ror	r16
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
		distance = HCSR04_Run();
		LCD_Write_String(0,0,"Distance:");
		i=15; //从最低位开始转换和显示，最多7位
		while(distance>0)
 420:	01 15       	cp	r16, r1
 422:	11 05       	cpc	r17, r1
 424:	29 f6       	brne	.-118    	; 0x3b0 <main+0xfa>
			if(distance<10000)
			LCD_Write_String(1,4,"Close");
			else
			LCD_Write_String(1,0,"NOT");
		i--; distance /=10;}
		while(i>8) //高位没有数字时不显示
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	87 15       	cp	r24, r7
 42a:	28 f0       	brcs	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	    _delay_ms(500);
	    for(n=0;n<100;n++)
	    for(m=0;m<1000;m++);
		distance = HCSR04_Run();
		LCD_Write_String(0,0,"Distance:");
		i=15; //从最低位开始转换和显示，最多7位
 42e:	0f 2e       	mov	r0, r31
 430:	ff e0       	ldi	r31, 0x0F	; 15
 432:	7f 2e       	mov	r7, r31
 434:	f0 2d       	mov	r31, r0
			else
			LCD_Write_String(1,0,"NOT");
		i--; distance /=10;}
		while(i>8) //高位没有数字时不显示
		{ 
			LCD_Write_Char(0,i,0x20);i--;
 436:	49 2d       	mov	r20, r9
 438:	67 2d       	mov	r22, r7
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	b1 de       	rcall	.-670    	; 0x1a0 <LCD_Write_Char>
 43e:	7a 94       	dec	r7
			if(distance<10000)
			LCD_Write_String(1,4,"Close");
			else
			LCD_Write_String(1,0,"NOT");
		i--; distance /=10;}
		while(i>8) //高位没有数字时不显示
 440:	98 e0       	ldi	r25, 0x08	; 8
 442:	97 15       	cp	r25, r7
 444:	c0 f3       	brcs	.-16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 446:	e7 ea       	ldi	r30, 0xA7	; 167
 448:	f1 e6       	ldi	r31, 0x61	; 97
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 450:	00 00       	nop
		{ 
			LCD_Write_Char(0,i,0x20);i--;
		}
		_delay_ms(100);
		if(PIND & (1<<PIND0))
 452:	80 9b       	sbis	0x10, 0	; 16
 454:	06 c0       	rjmp	.+12     	; 0x462 <__stack+0x3>
		run_stepper(0,1,4096);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	50 e1       	ldi	r21, 0x10	; 16
 45a:	6f 2d       	mov	r22, r15
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	e8 de       	rcall	.-560    	; 0x230 <run_stepper>
 460:	05 c0       	rjmp	.+10     	; 0x46c <__stack+0xd>
		//8拍驱动方式，顺时针，转动一周
		else
		run_stepper(0,0,4096);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e1       	ldi	r21, 0x10	; 16
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	e2 de       	rcall	.-572    	; 0x230 <run_stepper>
		//8拍驱动方式，逆时针，转动一周
		while(!(ADCSRA & (1<<ADIF)));//等待ADC转换结束
 46c:	34 9b       	sbis	0x06, 4	; 6
 46e:	fe cf       	rjmp	.-4      	; 0x46c <__stack+0xd>
		adc_dl = ADCL;//先读低8位
 470:	14 b1       	in	r17, 0x04	; 4
		adc_dh = ADCH;//再读高8位
 472:	65 b1       	in	r22, 0x05	; 5
		adc_result = adc_dh *256.0+adc_dl;//合并
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9f d1       	rcall	.+830    	; 0x7ba <__floatsisf>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e8       	ldi	r20, 0x80	; 128
 482:	53 e4       	ldi	r21, 0x43	; 67
 484:	2a d2       	rcall	.+1108   	; 0x8da <__mulsf3>
 486:	69 87       	std	Y+9, r22	; 0x09
 488:	7a 87       	std	Y+10, r23	; 0x0a
 48a:	8b 87       	std	Y+11, r24	; 0x0b
 48c:	9c 87       	std	Y+12, r25	; 0x0c
 48e:	61 2f       	mov	r22, r17
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	91 d1       	rcall	.+802    	; 0x7ba <__floatsisf>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	69 85       	ldd	r22, Y+9	; 0x09
 49e:	7a 85       	ldd	r23, Y+10	; 0x0a
 4a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 4a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 4a4:	90 d0       	rcall	.+288    	; 0x5c6 <__addsf3>
		adc_result *=5.0/1024.0;//计算电压
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 ea       	ldi	r20, 0xA0	; 160
 4ac:	5b e3       	ldi	r21, 0x3B	; 59
 4ae:	15 d2       	rcall	.+1066   	; 0x8da <__mulsf3>
 4b0:	69 87       	std	Y+9, r22	; 0x09
 4b2:	7a 87       	std	Y+10, r23	; 0x0a
 4b4:	8b 87       	std	Y+11, r24	; 0x0b
 4b6:	9c 87       	std	Y+12, r25	; 0x0c
 4b8:	fe 01       	movw	r30, r28
 4ba:	31 96       	adiw	r30, 0x01	; 1
		for(dh=0;dh<8;dh++)//初始化显示变量，都不显示
		{ uc_display[dh]=0x20; }
 4bc:	91 92       	st	Z+, r9
		while(!(ADCSRA & (1<<ADIF)));//等待ADC转换结束
		adc_dl = ADCL;//先读低8位
		adc_dh = ADCH;//再读高8位
		adc_result = adc_dh *256.0+adc_dl;//合并
		adc_result *=5.0/1024.0;//计算电压
		for(dh=0;dh<8;dh++)//初始化显示变量，都不显示
 4be:	ae 16       	cp	r10, r30
 4c0:	bf 06       	cpc	r11, r31
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__stack+0x5d>
		{ uc_display[dh]=0x20; }
		uc_int = (unsigned char) adc_result;//取整数
 4c4:	69 85       	ldd	r22, Y+9	; 0x09
 4c6:	7a 85       	ldd	r23, Y+10	; 0x0a
 4c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 4ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 4cc:	48 d1       	rcall	.+656    	; 0x75e <__fixunssfsi>
 4ce:	16 2f       	mov	r17, r22
		adc_result -=uc_int;//取小数
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	71 d1       	rcall	.+738    	; 0x7ba <__floatsisf>
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	69 85       	ldd	r22, Y+9	; 0x09
 4de:	7a 85       	ldd	r23, Y+10	; 0x0a
 4e0:	8b 85       	ldd	r24, Y+11	; 0x0b
 4e2:	9c 85       	ldd	r25, Y+12	; 0x0c
 4e4:	6f d0       	rcall	.+222    	; 0x5c4 <__subsf3>
 4e6:	69 87       	std	Y+9, r22	; 0x09
 4e8:	7a 87       	std	Y+10, r23	; 0x0a
 4ea:	8b 87       	std	Y+11, r24	; 0x0b
 4ec:	9c 87       	std	Y+12, r25	; 0x0c
		dh=2;//整数占2位
		uc_display[3]=0x30;//初始整数为0
		while(uc_int > 0 && dh >0)
 4ee:	11 23       	and	r17, r17
 4f0:	01 f1       	breq	.+64     	; 0x532 <__stack+0xd3>
		{ uc_display[dh--]=uc_int%10+0x30;//最低位数字转换成字符
 4f2:	1e 9d       	mul	r17, r14
 4f4:	81 2d       	mov	r24, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	86 95       	lsr	r24
 4fa:	86 95       	lsr	r24
 4fc:	86 95       	lsr	r24
 4fe:	28 2f       	mov	r18, r24
 500:	22 0f       	add	r18, r18
 502:	92 2f       	mov	r25, r18
 504:	99 0f       	add	r25, r25
 506:	99 0f       	add	r25, r25
 508:	92 0f       	add	r25, r18
 50a:	19 1b       	sub	r17, r25
 50c:	91 2f       	mov	r25, r17
 50e:	90 5d       	subi	r25, 0xD0	; 208
 510:	9b 83       	std	Y+3, r25	; 0x03
		{ uc_display[dh]=0x20; }
		uc_int = (unsigned char) adc_result;//取整数
		adc_result -=uc_int;//取小数
		dh=2;//整数占2位
		uc_display[3]=0x30;//初始整数为0
		while(uc_int > 0 && dh >0)
 512:	88 23       	and	r24, r24
 514:	71 f0       	breq	.+28     	; 0x532 <__stack+0xd3>
		{ uc_display[dh--]=uc_int%10+0x30;//最低位数字转换成字符
 516:	8e 9d       	mul	r24, r14
 518:	91 2d       	mov	r25, r1
 51a:	11 24       	eor	r1, r1
 51c:	96 95       	lsr	r25
 51e:	96 95       	lsr	r25
 520:	96 95       	lsr	r25
 522:	99 0f       	add	r25, r25
 524:	29 2f       	mov	r18, r25
 526:	22 0f       	add	r18, r18
 528:	22 0f       	add	r18, r18
 52a:	92 0f       	add	r25, r18
 52c:	89 1b       	sub	r24, r25
 52e:	80 5d       	subi	r24, 0xD0	; 208
 530:	8a 83       	std	Y+2, r24	; 0x02
		uc_int/=10;/*去掉整数的最低位*/}
		uc_display[3]='.';//小数点
 532:	6c 82       	std	Y+4, r6	; 0x04
		dh=4; //小数从元素4开始存储
		while(adc_result>0 && dh<7)//三位小数
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	a9 01       	movw	r20, r18
 53a:	69 85       	ldd	r22, Y+9	; 0x09
 53c:	7a 85       	ldd	r23, Y+10	; 0x0a
 53e:	8b 85       	ldd	r24, Y+11	; 0x0b
 540:	9c 85       	ldd	r25, Y+12	; 0x0c
 542:	c7 d1       	rcall	.+910    	; 0x8d2 <__gesf2>
 544:	18 16       	cp	r1, r24
 546:	9c f5       	brge	.+102    	; 0x5ae <__stack+0x14f>
 548:	8e 01       	movw	r16, r28
 54a:	0b 5f       	subi	r16, 0xFB	; 251
 54c:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			adc_result *=10;//第一位小数调整到整数
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 e2       	ldi	r20, 0x20	; 32
 554:	51 e4       	ldi	r21, 0x41	; 65
 556:	69 85       	ldd	r22, Y+9	; 0x09
 558:	7a 85       	ldd	r23, Y+10	; 0x0a
 55a:	8b 85       	ldd	r24, Y+11	; 0x0b
 55c:	9c 85       	ldd	r25, Y+12	; 0x0c
 55e:	bd d1       	rcall	.+890    	; 0x8da <__mulsf3>
 560:	69 87       	std	Y+9, r22	; 0x09
 562:	7a 87       	std	Y+10, r23	; 0x0a
 564:	8b 87       	std	Y+11, r24	; 0x0b
 566:	9c 87       	std	Y+12, r25	; 0x0c
			uc_int = (unsigned char) adc_result;//取整数
 568:	fa d0       	rcall	.+500    	; 0x75e <__fixunssfsi>
 56a:	76 2e       	mov	r7, r22
			adc_result -=uc_int; //剩下的小数部分
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	23 d1       	rcall	.+582    	; 0x7ba <__floatsisf>
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	69 85       	ldd	r22, Y+9	; 0x09
 57a:	7a 85       	ldd	r23, Y+10	; 0x0a
 57c:	8b 85       	ldd	r24, Y+11	; 0x0b
 57e:	9c 85       	ldd	r25, Y+12	; 0x0c
 580:	21 d0       	rcall	.+66     	; 0x5c4 <__subsf3>
 582:	69 87       	std	Y+9, r22	; 0x09
 584:	7a 87       	std	Y+10, r23	; 0x0a
 586:	8b 87       	std	Y+11, r24	; 0x0b
 588:	9c 87       	std	Y+12, r25	; 0x0c
			uc_display[dh++]=uc_int+0x30; //当前的小数为转换为字符以显示
 58a:	80 e3       	ldi	r24, 0x30	; 48
 58c:	87 0d       	add	r24, r7
 58e:	f8 01       	movw	r30, r16
 590:	81 93       	st	Z+, r24
 592:	8f 01       	movw	r16, r30
		while(uc_int > 0 && dh >0)
		{ uc_display[dh--]=uc_int%10+0x30;//最低位数字转换成字符
		uc_int/=10;/*去掉整数的最低位*/}
		uc_display[3]='.';//小数点
		dh=4; //小数从元素4开始存储
		while(adc_result>0 && dh<7)//三位小数
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	a9 01       	movw	r20, r18
 59a:	69 85       	ldd	r22, Y+9	; 0x09
 59c:	7a 85       	ldd	r23, Y+10	; 0x0a
 59e:	8b 85       	ldd	r24, Y+11	; 0x0b
 5a0:	9c 85       	ldd	r25, Y+12	; 0x0c
 5a2:	97 d1       	rcall	.+814    	; 0x8d2 <__gesf2>
 5a4:	18 16       	cp	r1, r24
 5a6:	1c f4       	brge	.+6      	; 0x5ae <__stack+0x14f>
 5a8:	c0 16       	cp	r12, r16
 5aa:	d1 06       	cpc	r13, r17
 5ac:	81 f6       	brne	.-96     	; 0x54e <__stack+0xef>
			adc_result *=10;//第一位小数调整到整数
			uc_int = (unsigned char) adc_result;//取整数
			adc_result -=uc_int; //剩下的小数部分
			uc_display[dh++]=uc_int+0x30; //当前的小数为转换为字符以显示
		}
		uc_display[7]=0; //字符结束
 5ae:	18 86       	std	Y+8, r1	; 0x08
		LCD_Write_String(1,9,uc_display); //显示采集转换后的电压数值
 5b0:	ae 01       	movw	r20, r28
 5b2:	4f 5f       	subi	r20, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	69 e0       	ldi	r22, 0x09	; 9
 5b8:	8f 2d       	mov	r24, r15
 5ba:	fa dd       	rcall	.-1036   	; 0x1b0 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5bc:	f4 e6       	ldi	r31, 0x64	; 100
 5be:	fa 95       	dec	r31
 5c0:	f1 f7       	brne	.-4      	; 0x5be <__stack+0x15f>
 5c2:	a8 ce       	rjmp	.-688    	; 0x314 <main+0x5e>

000005c4 <__subsf3>:
 5c4:	50 58       	subi	r21, 0x80	; 128

000005c6 <__addsf3>:
 5c6:	bb 27       	eor	r27, r27
 5c8:	aa 27       	eor	r26, r26
 5ca:	0e d0       	rcall	.+28     	; 0x5e8 <__addsf3x>
 5cc:	48 c1       	rjmp	.+656    	; 0x85e <__fp_round>
 5ce:	39 d1       	rcall	.+626    	; 0x842 <__fp_pscA>
 5d0:	30 f0       	brcs	.+12     	; 0x5de <__addsf3+0x18>
 5d2:	3e d1       	rcall	.+636    	; 0x850 <__fp_pscB>
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3+0x18>
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <__addsf3+0x1e>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__addsf3+0x1a>
 5dc:	1e f4       	brtc	.+6      	; 0x5e4 <__addsf3+0x1e>
 5de:	2e c1       	rjmp	.+604    	; 0x83c <__fp_nan>
 5e0:	0e f4       	brtc	.+2      	; 0x5e4 <__addsf3+0x1e>
 5e2:	e0 95       	com	r30
 5e4:	e7 fb       	bst	r30, 7
 5e6:	24 c1       	rjmp	.+584    	; 0x830 <__fp_inf>

000005e8 <__addsf3x>:
 5e8:	e9 2f       	mov	r30, r25
 5ea:	4a d1       	rcall	.+660    	; 0x880 <__fp_split3>
 5ec:	80 f3       	brcs	.-32     	; 0x5ce <__addsf3+0x8>
 5ee:	ba 17       	cp	r27, r26
 5f0:	62 07       	cpc	r22, r18
 5f2:	73 07       	cpc	r23, r19
 5f4:	84 07       	cpc	r24, r20
 5f6:	95 07       	cpc	r25, r21
 5f8:	18 f0       	brcs	.+6      	; 0x600 <__addsf3x+0x18>
 5fa:	71 f4       	brne	.+28     	; 0x618 <__addsf3x+0x30>
 5fc:	9e f5       	brtc	.+102    	; 0x664 <__addsf3x+0x7c>
 5fe:	62 c1       	rjmp	.+708    	; 0x8c4 <__fp_zero>
 600:	0e f4       	brtc	.+2      	; 0x604 <__addsf3x+0x1c>
 602:	e0 95       	com	r30
 604:	0b 2e       	mov	r0, r27
 606:	ba 2f       	mov	r27, r26
 608:	a0 2d       	mov	r26, r0
 60a:	0b 01       	movw	r0, r22
 60c:	b9 01       	movw	r22, r18
 60e:	90 01       	movw	r18, r0
 610:	0c 01       	movw	r0, r24
 612:	ca 01       	movw	r24, r20
 614:	a0 01       	movw	r20, r0
 616:	11 24       	eor	r1, r1
 618:	ff 27       	eor	r31, r31
 61a:	59 1b       	sub	r21, r25
 61c:	99 f0       	breq	.+38     	; 0x644 <__addsf3x+0x5c>
 61e:	59 3f       	cpi	r21, 0xF9	; 249
 620:	50 f4       	brcc	.+20     	; 0x636 <__addsf3x+0x4e>
 622:	50 3e       	cpi	r21, 0xE0	; 224
 624:	68 f1       	brcs	.+90     	; 0x680 <__addsf3x+0x98>
 626:	1a 16       	cp	r1, r26
 628:	f0 40       	sbci	r31, 0x00	; 0
 62a:	a2 2f       	mov	r26, r18
 62c:	23 2f       	mov	r18, r19
 62e:	34 2f       	mov	r19, r20
 630:	44 27       	eor	r20, r20
 632:	58 5f       	subi	r21, 0xF8	; 248
 634:	f3 cf       	rjmp	.-26     	; 0x61c <__addsf3x+0x34>
 636:	46 95       	lsr	r20
 638:	37 95       	ror	r19
 63a:	27 95       	ror	r18
 63c:	a7 95       	ror	r26
 63e:	f0 40       	sbci	r31, 0x00	; 0
 640:	53 95       	inc	r21
 642:	c9 f7       	brne	.-14     	; 0x636 <__addsf3x+0x4e>
 644:	7e f4       	brtc	.+30     	; 0x664 <__addsf3x+0x7c>
 646:	1f 16       	cp	r1, r31
 648:	ba 0b       	sbc	r27, r26
 64a:	62 0b       	sbc	r22, r18
 64c:	73 0b       	sbc	r23, r19
 64e:	84 0b       	sbc	r24, r20
 650:	ba f0       	brmi	.+46     	; 0x680 <__addsf3x+0x98>
 652:	91 50       	subi	r25, 0x01	; 1
 654:	a1 f0       	breq	.+40     	; 0x67e <__addsf3x+0x96>
 656:	ff 0f       	add	r31, r31
 658:	bb 1f       	adc	r27, r27
 65a:	66 1f       	adc	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	c2 f7       	brpl	.-16     	; 0x652 <__addsf3x+0x6a>
 662:	0e c0       	rjmp	.+28     	; 0x680 <__addsf3x+0x98>
 664:	ba 0f       	add	r27, r26
 666:	62 1f       	adc	r22, r18
 668:	73 1f       	adc	r23, r19
 66a:	84 1f       	adc	r24, r20
 66c:	48 f4       	brcc	.+18     	; 0x680 <__addsf3x+0x98>
 66e:	87 95       	ror	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f7 95       	ror	r31
 678:	9e 3f       	cpi	r25, 0xFE	; 254
 67a:	08 f0       	brcs	.+2      	; 0x67e <__addsf3x+0x96>
 67c:	b3 cf       	rjmp	.-154    	; 0x5e4 <__addsf3+0x1e>
 67e:	93 95       	inc	r25
 680:	88 0f       	add	r24, r24
 682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0x9e>
 684:	99 27       	eor	r25, r25
 686:	ee 0f       	add	r30, r30
 688:	97 95       	ror	r25
 68a:	87 95       	ror	r24
 68c:	08 95       	ret

0000068e <__divsf3>:
 68e:	0c d0       	rcall	.+24     	; 0x6a8 <__divsf3x>
 690:	e6 c0       	rjmp	.+460    	; 0x85e <__fp_round>
 692:	de d0       	rcall	.+444    	; 0x850 <__fp_pscB>
 694:	40 f0       	brcs	.+16     	; 0x6a6 <__divsf3+0x18>
 696:	d5 d0       	rcall	.+426    	; 0x842 <__fp_pscA>
 698:	30 f0       	brcs	.+12     	; 0x6a6 <__divsf3+0x18>
 69a:	21 f4       	brne	.+8      	; 0x6a4 <__divsf3+0x16>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	19 f0       	breq	.+6      	; 0x6a6 <__divsf3+0x18>
 6a0:	c7 c0       	rjmp	.+398    	; 0x830 <__fp_inf>
 6a2:	51 11       	cpse	r21, r1
 6a4:	10 c1       	rjmp	.+544    	; 0x8c6 <__fp_szero>
 6a6:	ca c0       	rjmp	.+404    	; 0x83c <__fp_nan>

000006a8 <__divsf3x>:
 6a8:	eb d0       	rcall	.+470    	; 0x880 <__fp_split3>
 6aa:	98 f3       	brcs	.-26     	; 0x692 <__divsf3+0x4>

000006ac <__divsf3_pse>:
 6ac:	99 23       	and	r25, r25
 6ae:	c9 f3       	breq	.-14     	; 0x6a2 <__divsf3+0x14>
 6b0:	55 23       	and	r21, r21
 6b2:	b1 f3       	breq	.-20     	; 0x6a0 <__divsf3+0x12>
 6b4:	95 1b       	sub	r25, r21
 6b6:	55 0b       	sbc	r21, r21
 6b8:	bb 27       	eor	r27, r27
 6ba:	aa 27       	eor	r26, r26
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	38 f0       	brcs	.+14     	; 0x6d2 <__divsf3_pse+0x26>
 6c4:	9f 5f       	subi	r25, 0xFF	; 255
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	44 1f       	adc	r20, r20
 6ce:	aa 1f       	adc	r26, r26
 6d0:	a9 f3       	breq	.-22     	; 0x6bc <__divsf3_pse+0x10>
 6d2:	33 d0       	rcall	.+102    	; 0x73a <__divsf3_pse+0x8e>
 6d4:	0e 2e       	mov	r0, r30
 6d6:	3a f0       	brmi	.+14     	; 0x6e6 <__divsf3_pse+0x3a>
 6d8:	e0 e8       	ldi	r30, 0x80	; 128
 6da:	30 d0       	rcall	.+96     	; 0x73c <__divsf3_pse+0x90>
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	e6 95       	lsr	r30
 6e2:	00 1c       	adc	r0, r0
 6e4:	ca f7       	brpl	.-14     	; 0x6d8 <__divsf3_pse+0x2c>
 6e6:	29 d0       	rcall	.+82     	; 0x73a <__divsf3_pse+0x8e>
 6e8:	fe 2f       	mov	r31, r30
 6ea:	27 d0       	rcall	.+78     	; 0x73a <__divsf3_pse+0x8e>
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	bb 1f       	adc	r27, r27
 6f4:	26 17       	cp	r18, r22
 6f6:	37 07       	cpc	r19, r23
 6f8:	48 07       	cpc	r20, r24
 6fa:	ab 07       	cpc	r26, r27
 6fc:	b0 e8       	ldi	r27, 0x80	; 128
 6fe:	09 f0       	breq	.+2      	; 0x702 <__divsf3_pse+0x56>
 700:	bb 0b       	sbc	r27, r27
 702:	80 2d       	mov	r24, r0
 704:	bf 01       	movw	r22, r30
 706:	ff 27       	eor	r31, r31
 708:	93 58       	subi	r25, 0x83	; 131
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	2a f0       	brmi	.+10     	; 0x718 <__divsf3_pse+0x6c>
 70e:	9e 3f       	cpi	r25, 0xFE	; 254
 710:	51 05       	cpc	r21, r1
 712:	68 f0       	brcs	.+26     	; 0x72e <__divsf3_pse+0x82>
 714:	8d c0       	rjmp	.+282    	; 0x830 <__fp_inf>
 716:	d7 c0       	rjmp	.+430    	; 0x8c6 <__fp_szero>
 718:	5f 3f       	cpi	r21, 0xFF	; 255
 71a:	ec f3       	brlt	.-6      	; 0x716 <__divsf3_pse+0x6a>
 71c:	98 3e       	cpi	r25, 0xE8	; 232
 71e:	dc f3       	brlt	.-10     	; 0x716 <__divsf3_pse+0x6a>
 720:	86 95       	lsr	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b7 95       	ror	r27
 728:	f7 95       	ror	r31
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c9 f7       	brne	.-14     	; 0x720 <__divsf3_pse+0x74>
 72e:	88 0f       	add	r24, r24
 730:	91 1d       	adc	r25, r1
 732:	96 95       	lsr	r25
 734:	87 95       	ror	r24
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret
 73a:	e1 e0       	ldi	r30, 0x01	; 1
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	bb 1f       	adc	r27, r27
 744:	62 17       	cp	r22, r18
 746:	73 07       	cpc	r23, r19
 748:	84 07       	cpc	r24, r20
 74a:	ba 07       	cpc	r27, r26
 74c:	20 f0       	brcs	.+8      	; 0x756 <__divsf3_pse+0xaa>
 74e:	62 1b       	sub	r22, r18
 750:	73 0b       	sbc	r23, r19
 752:	84 0b       	sbc	r24, r20
 754:	ba 0b       	sbc	r27, r26
 756:	ee 1f       	adc	r30, r30
 758:	88 f7       	brcc	.-30     	; 0x73c <__divsf3_pse+0x90>
 75a:	e0 95       	com	r30
 75c:	08 95       	ret

0000075e <__fixunssfsi>:
 75e:	98 d0       	rcall	.+304    	; 0x890 <__fp_splitA>
 760:	88 f0       	brcs	.+34     	; 0x784 <__fixunssfsi+0x26>
 762:	9f 57       	subi	r25, 0x7F	; 127
 764:	90 f0       	brcs	.+36     	; 0x78a <__fixunssfsi+0x2c>
 766:	b9 2f       	mov	r27, r25
 768:	99 27       	eor	r25, r25
 76a:	b7 51       	subi	r27, 0x17	; 23
 76c:	a0 f0       	brcs	.+40     	; 0x796 <__fixunssfsi+0x38>
 76e:	d1 f0       	breq	.+52     	; 0x7a4 <__fixunssfsi+0x46>
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	1a f0       	brmi	.+6      	; 0x780 <__fixunssfsi+0x22>
 77a:	ba 95       	dec	r27
 77c:	c9 f7       	brne	.-14     	; 0x770 <__fixunssfsi+0x12>
 77e:	12 c0       	rjmp	.+36     	; 0x7a4 <__fixunssfsi+0x46>
 780:	b1 30       	cpi	r27, 0x01	; 1
 782:	81 f0       	breq	.+32     	; 0x7a4 <__fixunssfsi+0x46>
 784:	9f d0       	rcall	.+318    	; 0x8c4 <__fp_zero>
 786:	b1 e0       	ldi	r27, 0x01	; 1
 788:	08 95       	ret
 78a:	9c c0       	rjmp	.+312    	; 0x8c4 <__fp_zero>
 78c:	67 2f       	mov	r22, r23
 78e:	78 2f       	mov	r23, r24
 790:	88 27       	eor	r24, r24
 792:	b8 5f       	subi	r27, 0xF8	; 248
 794:	39 f0       	breq	.+14     	; 0x7a4 <__fixunssfsi+0x46>
 796:	b9 3f       	cpi	r27, 0xF9	; 249
 798:	cc f3       	brlt	.-14     	; 0x78c <__fixunssfsi+0x2e>
 79a:	86 95       	lsr	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	b3 95       	inc	r27
 7a2:	d9 f7       	brne	.-10     	; 0x79a <__fixunssfsi+0x3c>
 7a4:	3e f4       	brtc	.+14     	; 0x7b4 <__fixunssfsi+0x56>
 7a6:	90 95       	com	r25
 7a8:	80 95       	com	r24
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	08 95       	ret

000007b6 <__floatunsisf>:
 7b6:	e8 94       	clt
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <__floatsisf+0x12>

000007ba <__floatsisf>:
 7ba:	97 fb       	bst	r25, 7
 7bc:	3e f4       	brtc	.+14     	; 0x7cc <__floatsisf+0x12>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	99 23       	and	r25, r25
 7ce:	a9 f0       	breq	.+42     	; 0x7fa <__floatsisf+0x40>
 7d0:	f9 2f       	mov	r31, r25
 7d2:	96 e9       	ldi	r25, 0x96	; 150
 7d4:	bb 27       	eor	r27, r27
 7d6:	93 95       	inc	r25
 7d8:	f6 95       	lsr	r31
 7da:	87 95       	ror	r24
 7dc:	77 95       	ror	r23
 7de:	67 95       	ror	r22
 7e0:	b7 95       	ror	r27
 7e2:	f1 11       	cpse	r31, r1
 7e4:	f8 cf       	rjmp	.-16     	; 0x7d6 <__floatsisf+0x1c>
 7e6:	fa f4       	brpl	.+62     	; 0x826 <__floatsisf+0x6c>
 7e8:	bb 0f       	add	r27, r27
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <__floatsisf+0x36>
 7ec:	60 ff       	sbrs	r22, 0
 7ee:	1b c0       	rjmp	.+54     	; 0x826 <__floatsisf+0x6c>
 7f0:	6f 5f       	subi	r22, 0xFF	; 255
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	16 c0       	rjmp	.+44     	; 0x826 <__floatsisf+0x6c>
 7fa:	88 23       	and	r24, r24
 7fc:	11 f0       	breq	.+4      	; 0x802 <__floatsisf+0x48>
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	11 c0       	rjmp	.+34     	; 0x824 <__floatsisf+0x6a>
 802:	77 23       	and	r23, r23
 804:	21 f0       	breq	.+8      	; 0x80e <__floatsisf+0x54>
 806:	9e e8       	ldi	r25, 0x8E	; 142
 808:	87 2f       	mov	r24, r23
 80a:	76 2f       	mov	r23, r22
 80c:	05 c0       	rjmp	.+10     	; 0x818 <__floatsisf+0x5e>
 80e:	66 23       	and	r22, r22
 810:	71 f0       	breq	.+28     	; 0x82e <__floatsisf+0x74>
 812:	96 e8       	ldi	r25, 0x86	; 134
 814:	86 2f       	mov	r24, r22
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	2a f0       	brmi	.+10     	; 0x826 <__floatsisf+0x6c>
 81c:	9a 95       	dec	r25
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	da f7       	brpl	.-10     	; 0x81c <__floatsisf+0x62>
 826:	88 0f       	add	r24, r24
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <__fp_inf>:
 830:	97 f9       	bld	r25, 7
 832:	9f 67       	ori	r25, 0x7F	; 127
 834:	80 e8       	ldi	r24, 0x80	; 128
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	08 95       	ret

0000083c <__fp_nan>:
 83c:	9f ef       	ldi	r25, 0xFF	; 255
 83e:	80 ec       	ldi	r24, 0xC0	; 192
 840:	08 95       	ret

00000842 <__fp_pscA>:
 842:	00 24       	eor	r0, r0
 844:	0a 94       	dec	r0
 846:	16 16       	cp	r1, r22
 848:	17 06       	cpc	r1, r23
 84a:	18 06       	cpc	r1, r24
 84c:	09 06       	cpc	r0, r25
 84e:	08 95       	ret

00000850 <__fp_pscB>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	12 16       	cp	r1, r18
 856:	13 06       	cpc	r1, r19
 858:	14 06       	cpc	r1, r20
 85a:	05 06       	cpc	r0, r21
 85c:	08 95       	ret

0000085e <__fp_round>:
 85e:	09 2e       	mov	r0, r25
 860:	03 94       	inc	r0
 862:	00 0c       	add	r0, r0
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0xc>
 866:	88 23       	and	r24, r24
 868:	52 f0       	brmi	.+20     	; 0x87e <__fp_round+0x20>
 86a:	bb 0f       	add	r27, r27
 86c:	40 f4       	brcc	.+16     	; 0x87e <__fp_round+0x20>
 86e:	bf 2b       	or	r27, r31
 870:	11 f4       	brne	.+4      	; 0x876 <__fp_round+0x18>
 872:	60 ff       	sbrs	r22, 0
 874:	04 c0       	rjmp	.+8      	; 0x87e <__fp_round+0x20>
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__fp_split3>:
 880:	57 fd       	sbrc	r21, 7
 882:	90 58       	subi	r25, 0x80	; 128
 884:	44 0f       	add	r20, r20
 886:	55 1f       	adc	r21, r21
 888:	59 f0       	breq	.+22     	; 0x8a0 <__fp_splitA+0x10>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	71 f0       	breq	.+28     	; 0x8aa <__fp_splitA+0x1a>
 88e:	47 95       	ror	r20

00000890 <__fp_splitA>:
 890:	88 0f       	add	r24, r24
 892:	97 fb       	bst	r25, 7
 894:	99 1f       	adc	r25, r25
 896:	61 f0       	breq	.+24     	; 0x8b0 <__fp_splitA+0x20>
 898:	9f 3f       	cpi	r25, 0xFF	; 255
 89a:	79 f0       	breq	.+30     	; 0x8ba <__fp_splitA+0x2a>
 89c:	87 95       	ror	r24
 89e:	08 95       	ret
 8a0:	12 16       	cp	r1, r18
 8a2:	13 06       	cpc	r1, r19
 8a4:	14 06       	cpc	r1, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	f2 cf       	rjmp	.-28     	; 0x88e <__fp_split3+0xe>
 8aa:	46 95       	lsr	r20
 8ac:	f1 df       	rcall	.-30     	; 0x890 <__fp_splitA>
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <__fp_splitA+0x30>
 8b0:	16 16       	cp	r1, r22
 8b2:	17 06       	cpc	r1, r23
 8b4:	18 06       	cpc	r1, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	f1 cf       	rjmp	.-30     	; 0x89c <__fp_splitA+0xc>
 8ba:	86 95       	lsr	r24
 8bc:	71 05       	cpc	r23, r1
 8be:	61 05       	cpc	r22, r1
 8c0:	08 94       	sec
 8c2:	08 95       	ret

000008c4 <__fp_zero>:
 8c4:	e8 94       	clt

000008c6 <__fp_szero>:
 8c6:	bb 27       	eor	r27, r27
 8c8:	66 27       	eor	r22, r22
 8ca:	77 27       	eor	r23, r23
 8cc:	cb 01       	movw	r24, r22
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <__gesf2>:
 8d2:	66 d0       	rcall	.+204    	; 0x9a0 <__fp_cmp>
 8d4:	08 f4       	brcc	.+2      	; 0x8d8 <__gesf2+0x6>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__mulsf3>:
 8da:	0b d0       	rcall	.+22     	; 0x8f2 <__mulsf3x>
 8dc:	c0 cf       	rjmp	.-128    	; 0x85e <__fp_round>
 8de:	b1 df       	rcall	.-158    	; 0x842 <__fp_pscA>
 8e0:	28 f0       	brcs	.+10     	; 0x8ec <__mulsf3+0x12>
 8e2:	b6 df       	rcall	.-148    	; 0x850 <__fp_pscB>
 8e4:	18 f0       	brcs	.+6      	; 0x8ec <__mulsf3+0x12>
 8e6:	95 23       	and	r25, r21
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__mulsf3+0x12>
 8ea:	a2 cf       	rjmp	.-188    	; 0x830 <__fp_inf>
 8ec:	a7 cf       	rjmp	.-178    	; 0x83c <__fp_nan>
 8ee:	11 24       	eor	r1, r1
 8f0:	ea cf       	rjmp	.-44     	; 0x8c6 <__fp_szero>

000008f2 <__mulsf3x>:
 8f2:	c6 df       	rcall	.-116    	; 0x880 <__fp_split3>
 8f4:	a0 f3       	brcs	.-24     	; 0x8de <__mulsf3+0x4>

000008f6 <__mulsf3_pse>:
 8f6:	95 9f       	mul	r25, r21
 8f8:	d1 f3       	breq	.-12     	; 0x8ee <__mulsf3+0x14>
 8fa:	95 0f       	add	r25, r21
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	55 1f       	adc	r21, r21
 900:	62 9f       	mul	r22, r18
 902:	f0 01       	movw	r30, r0
 904:	72 9f       	mul	r23, r18
 906:	bb 27       	eor	r27, r27
 908:	f0 0d       	add	r31, r0
 90a:	b1 1d       	adc	r27, r1
 90c:	63 9f       	mul	r22, r19
 90e:	aa 27       	eor	r26, r26
 910:	f0 0d       	add	r31, r0
 912:	b1 1d       	adc	r27, r1
 914:	aa 1f       	adc	r26, r26
 916:	64 9f       	mul	r22, r20
 918:	66 27       	eor	r22, r22
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	66 1f       	adc	r22, r22
 920:	82 9f       	mul	r24, r18
 922:	22 27       	eor	r18, r18
 924:	b0 0d       	add	r27, r0
 926:	a1 1d       	adc	r26, r1
 928:	62 1f       	adc	r22, r18
 92a:	73 9f       	mul	r23, r19
 92c:	b0 0d       	add	r27, r0
 92e:	a1 1d       	adc	r26, r1
 930:	62 1f       	adc	r22, r18
 932:	83 9f       	mul	r24, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	22 1f       	adc	r18, r18
 93a:	74 9f       	mul	r23, r20
 93c:	33 27       	eor	r19, r19
 93e:	a0 0d       	add	r26, r0
 940:	61 1d       	adc	r22, r1
 942:	23 1f       	adc	r18, r19
 944:	84 9f       	mul	r24, r20
 946:	60 0d       	add	r22, r0
 948:	21 1d       	adc	r18, r1
 94a:	82 2f       	mov	r24, r18
 94c:	76 2f       	mov	r23, r22
 94e:	6a 2f       	mov	r22, r26
 950:	11 24       	eor	r1, r1
 952:	9f 57       	subi	r25, 0x7F	; 127
 954:	50 40       	sbci	r21, 0x00	; 0
 956:	8a f0       	brmi	.+34     	; 0x97a <__mulsf3_pse+0x84>
 958:	e1 f0       	breq	.+56     	; 0x992 <__mulsf3_pse+0x9c>
 95a:	88 23       	and	r24, r24
 95c:	4a f0       	brmi	.+18     	; 0x970 <__mulsf3_pse+0x7a>
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	bb 1f       	adc	r27, r27
 964:	66 1f       	adc	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	91 50       	subi	r25, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	a9 f7       	brne	.-22     	; 0x95a <__mulsf3_pse+0x64>
 970:	9e 3f       	cpi	r25, 0xFE	; 254
 972:	51 05       	cpc	r21, r1
 974:	70 f0       	brcs	.+28     	; 0x992 <__mulsf3_pse+0x9c>
 976:	5c cf       	rjmp	.-328    	; 0x830 <__fp_inf>
 978:	a6 cf       	rjmp	.-180    	; 0x8c6 <__fp_szero>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	ec f3       	brlt	.-6      	; 0x978 <__mulsf3_pse+0x82>
 97e:	98 3e       	cpi	r25, 0xE8	; 232
 980:	dc f3       	brlt	.-10     	; 0x978 <__mulsf3_pse+0x82>
 982:	86 95       	lsr	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	e7 95       	ror	r30
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	c1 f7       	brne	.-16     	; 0x982 <__mulsf3_pse+0x8c>
 992:	fe 2b       	or	r31, r30
 994:	88 0f       	add	r24, r24
 996:	91 1d       	adc	r25, r1
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__fp_cmp>:
 9a0:	99 0f       	add	r25, r25
 9a2:	00 08       	sbc	r0, r0
 9a4:	55 0f       	add	r21, r21
 9a6:	aa 0b       	sbc	r26, r26
 9a8:	e0 e8       	ldi	r30, 0x80	; 128
 9aa:	fe ef       	ldi	r31, 0xFE	; 254
 9ac:	16 16       	cp	r1, r22
 9ae:	17 06       	cpc	r1, r23
 9b0:	e8 07       	cpc	r30, r24
 9b2:	f9 07       	cpc	r31, r25
 9b4:	c0 f0       	brcs	.+48     	; 0x9e6 <__fp_cmp+0x46>
 9b6:	12 16       	cp	r1, r18
 9b8:	13 06       	cpc	r1, r19
 9ba:	e4 07       	cpc	r30, r20
 9bc:	f5 07       	cpc	r31, r21
 9be:	98 f0       	brcs	.+38     	; 0x9e6 <__fp_cmp+0x46>
 9c0:	62 1b       	sub	r22, r18
 9c2:	73 0b       	sbc	r23, r19
 9c4:	84 0b       	sbc	r24, r20
 9c6:	95 0b       	sbc	r25, r21
 9c8:	39 f4       	brne	.+14     	; 0x9d8 <__fp_cmp+0x38>
 9ca:	0a 26       	eor	r0, r26
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <__fp_cmp+0x46>
 9ce:	23 2b       	or	r18, r19
 9d0:	24 2b       	or	r18, r20
 9d2:	25 2b       	or	r18, r21
 9d4:	21 f4       	brne	.+8      	; 0x9de <__fp_cmp+0x3e>
 9d6:	08 95       	ret
 9d8:	0a 26       	eor	r0, r26
 9da:	09 f4       	brne	.+2      	; 0x9de <__fp_cmp+0x3e>
 9dc:	a1 40       	sbci	r26, 0x01	; 1
 9de:	a6 95       	lsr	r26
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	81 1d       	adc	r24, r1
 9e4:	81 1d       	adc	r24, r1
 9e6:	08 95       	ret

000009e8 <__umulhisi3>:
 9e8:	a2 9f       	mul	r26, r18
 9ea:	b0 01       	movw	r22, r0
 9ec:	b3 9f       	mul	r27, r19
 9ee:	c0 01       	movw	r24, r0
 9f0:	a3 9f       	mul	r26, r19
 9f2:	01 d0       	rcall	.+2      	; 0x9f6 <__umulhisi3+0xe>
 9f4:	b2 9f       	mul	r27, r18
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	08 95       	ret

00000a00 <_exit>:
 a00:	f8 94       	cli

00000a02 <__stop_program>:
 a02:	ff cf       	rjmp	.-2      	; 0xa02 <__stop_program>
