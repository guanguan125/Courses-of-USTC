PB22061324 张全 5.2
实验内容：
1，用TC0的中断功能实现LED灯的闪烁：
#include <avr/io.h>
#include <avr/interrupt.h>
ISR(TIMER0_OVF_vect)
{ PORTC ^=(1<<PORTC0);}
int main(void)
{ DDRC |=(1<<DDRC0);//PC0为输出到LED正极
	TCCR0 = (1<<CS02)|(1<<CS00);//1024分频
	TCNT0 = 0;//从0开始计数
	TIMSK |=(1<<TOIE0);//允许TOV0中断
	sei();//全局中断开
	while (1)
	{
	}
}
2，仅用TC1实现LED灯的闪烁，过程不用CPU：
#include <avr/io.h>
int main(void)
{
	DDRB |=(1<<DDRB1);//PB1(OC1A)为输出
	ICR1 =2048;//设置TOP值
	OCR1A = 1024;//设置A路比较值
	TCCR1A |= (1<<COM1A1);//设置输出比较管脚切换方式等
	TCCR1B |= (1<<WGM13)|(1<<CS12);//设置PWM模式为8，时钟256分频
	while (1)
	{
	}
}
3，用TC1的1路比较输出控制1个LED呼吸灯，另1路的控制1路LED灯闪烁：
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char ui_cnt=0;//统计中断次数，确定OCR1A/B的值
ISR(TIMER1_OVF_vect)
{ ui_cnt++;//统计TC1溢出中断次数
	if(ui_cnt>249)ui_cnt=0;//统计到250次时清零
	if(ui_cnt<125)//前半程
	{ OCR1A = 0;//高电平的持续时间长
		OCR1B +=4;//高电平的持续时间渐短
	}
	else//后半程
	{ OCR1A =500;//低电平的持续时间长
		OCR1B -=4;//高电平的持续时间渐长
	}
}
int main(void)
{
	DDRB |=(1<<DDRB1)|(1<<DDRB2);//PB1(OC1A),PB2(OC1B)为输出
	ICR1 = 500;//设置TOP值
	OCR1A = 1;//设置A路比较值
	OCR1B = 1;//设置B路比较值
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);//设置’输出比较’管脚切换方式等
	TCCR1B |= (1<<WGM13)|(1<<CS11);//设置PWM模式为8，时钟8分频
	TIMSK = (1<<TOIE1);//开启TC1溢出中断
	sei();//开启全局中断
	while (1)
	{
	}
}
4，用PWM控制直流电机的旋转，能调速：
头文件1:#ifndef TWI_FUN_H_
#define TWI_FUN_H_
#include <util/twi.h>//软件自带TWI接口的寄存器等头文件
void TWI_Init(void)//twi 接口的初始化
{//设置SCL的频率：1MHz cpu-50KHz scl,2M-100K,8M-400K
	TWSR = 0x00; //最低2位为预分频设置(00-1,01-4,10-16,11-64)
	TWBR = 0x02; //位率设置，fscl=cpu频率/(16+2*TWBR*预分频值)
	TWCR = (1<<TWEN); //开启TWI
}
void TWI_Start(void)//发送Start信号，开始本次TWI通信
{ TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//发送Start信号
	while(!(TWCR &(1<<TWINT)));//等待Start信号发出
}
void TWI_Stop(void)//发送Stop信号，结束本次TWI通信
{ TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//发送Stop信号
}
void TWI_Write(unsigned char uc_data) //向TWI接口发送8位数据
{
	TWDR = uc_data;//8位数据存放在TWDR
	TWCR = (1<<TWINT)|(1<<TWEN);//发送TWDR中的数据
	while(!(TWCR &(1<<TWINT)));//等待数据发出
}
unsigned char TWI_Read_With_ACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//准备接收数据，并ACK
	while(!(TWCR &(1<<TWINT)));//等待接收数据
	return TWDR;//返回接收到的数据
}
unsigned char TWI_Read_With_NACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);//准备接收数据，并NACK
	while(!(TWCR &(1<<TWINT)));//等待接收数据
	return TWDR;//返回接收到的数据
}unsigned char TWI_Get_State_Info(void)
{
	unsigned char uc_status;
	uc_status = TWSR & 0xf8;
	return uc_status;
}
#endif /* TWI_FUN_H_ */
头文件2：
#ifndef TWI_LCD_H_
#define TWI_LCD_H_
#ifndef F_CPU
#define F_CPU 1000000UL //延时用
#endif
#include "twi_fun.h"
#include <util/delay.h>
//LCD1602 控制和显示指令
#define LCD_CLEARDISPLAY 0x01//清屏，设置AC为DDRAM地址0
#define LCD_RETURNHOME 0x02//设置AC为DDRAM地址0，光标回原点
#define LCD_ENTRYMODESET 0x04//与I/D和S位定义光标移动方向和显示移位
#define LCD_DISPLAYCONTROL 0x08//与D/C/B设置显示开关，光标开关/闪烁
#define LCD_CURSORSHIFT 0x10//与S/C和R/L一起设置光标移动或显示移位
#define LCD_FUNCTIONSET 0x20//与DL、N和F一起设置LCD功能:8/4位数
//据;1/2行显示;5*8/10点阵字符
#define LCD_SETCGRAMADDR 0x40//设置CGRAM地址到地址计数器(AC）
#define LCD_SETDDRAMADDR 0x80//设置DDRAM地址到地址计数器(AC）
// LCD进入模式设置位(LCD_ENTRYMODESET=0x04)
#define LCD_ENTRYSHIFT 0x01//S位=1，显示移位，=0不移位
#define LCD_ENTRYINC 0x02//I/D位=1，显示左移(递增)
//LCD显示开关控制位 (LCD_DISPLAYCONTROL=0x08)
#define LCD_BLINKON 0x01//B=1，闪烁
#define LCD_CURSORON 0x02//C=1，光标
#define LCD_DISPLAYON 0x04//D=1，显示开
//LCD光标和显示移位控制位(LCD_CURSORSHIFT=0x10)
#define LCD_CURSOR2LEFT 0x00//S/C=0,R/L=0:光标往左移
#define LCD_CURSOR2RIGHT 0x04//S/C=0,R/L=1:光标往右移
#define LCD_DC2LEFT 0x08//S/C=1,R/L=0:显示向左移，光标跟着移
#define LCD_DC2RIGHT 0x0C//S/C=1,R/L=1:显示向右移,光标跟着移
//LCD功能设置位(LCD_FUNCTIONSET=0x20)
#define LCD_4BITMODE 0x00 //DL=0:4位(DB7-4)数据，需2次传输
#define LCD_8BITMODE 0x10 //DL=1：8位(DB7-0)数据传输
#define LCD_1LINE 0x00 //N=0，1行显示
#define LCD_2LINE 0x08 //N=1，2行显示
#define LCD_5X8DOTS 0x00 //F=0：5X8 dots字符
#define LCD_5XADOTS 0x04 //F=1：5X10 dots字符，只能1行显示
//LCD 1602 控制管脚：I2C数据的低4位（PCF8574-P0~3)
#define LCD_RS 0x01 //PCF8574-P0控制LCD1602的RS管脚
#define LCD_RW 0x02 //PCF8574-P1）控制LCD1602的RW管脚
#define LCD_E 0x04 //PCF8574-P2）控制LCD1602的E管脚
#define LCD_BACKLIGHTON 0x08 //PCF8574-P3控制LCD1602的K管脚
#define LCD_SLAVE_ADDRESS 0x27 //从机地址PCF8574(A2-0:111)
unsigned char TWI_Write_LCD(unsigned char uc_data)
{ TWI_Start();//发送START信号
	if(TWI_Get_State_Info()!=TW_START) return 0;//不成功
	TWI_Write(LCD_SLAVE_ADDRESS<<1|TW_WRITE); //发送SLA+W
	if(TWI_Get_State_Info()!=TW_MT_SLA_ACK)return 0;//不成功
	TWI_Write(uc_data|LCD_BACKLIGHTON);//发送数据+背光常开
	if(TWI_Get_State_Info()!=TW_MT_DATA_ACK)return 0;//不成功
	TWI_Stop();
	return 1;//成功
}
void LCD_4Bit_Write(unsigned char uc_data)//4位方式写PCF8574
{ TWI_Write_LCD(uc_data);//数据送出，E=0
	_delay_us(1);//保持
	TWI_Write_LCD(uc_data|LCD_E);//数据送出，E=1
	_delay_us(1);//保持
	TWI_Write_LCD(uc_data & (~LCD_E));//数据送出，E=0
	_delay_us(50);//等待数据传输结束
}
void LCD_8Bit_Write(unsigned char uc_data,unsigned char uc_mode)
//2次4位数据传输方式写PCF9574,uc_mode:0-命令,1-数据
{ unsigned char high4bit = uc_data & 0xf0;
	unsigned char low4bit = (uc_data<<4)&0xf0;
	LCD_4Bit_Write(high4bit|uc_mode);//先发送高4位
	LCD_4Bit_Write(low4bit|uc_mode);//再发送低4位
}
void LCD_Init()//初始化LCD1602
{ _delay_ms(50);//上电后至少再等40ms
	LCD_4Bit_Write(0x30); //在默认8位接口，试着进入4位接口模式
	_delay_us(4500);//等待至少4.5ms
	LCD_4Bit_Write(0x30); _delay_us(4500);//等待至少4.5ms
	LCD_4Bit_Write(0x30); _delay_us(150);//等待至少150us
	LCD_4Bit_Write(0x20);//进入4位接口模式
	//设置模式，显示，点数等
	LCD_8Bit_Write(LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5X8DOTS,0);
	LCD_8Bit_Write(LCD_DISPLAYCONTROL|LCD_DISPLAYON,0);//显示
	LCD_8Bit_Write(LCD_CLEARDISPLAY,0); _delay_us(2000);//等待
	LCD_8Bit_Write(LCD_ENTRYMODESET|LCD_ENTRYINC,0);//显示左移(递增)
	LCD_8Bit_Write(LCD_RETURNHOME,0);//返回原点
	_delay_us(2000);//等待
}
void LCD_Set_Cursor_Location(unsigned char row,unsigned char col)
//设置光标位置,row:0~1,col:0~39
{ unsigned char offset[]={0x0,0x40}; LCD_8Bit_Write(LCD_SETDDRAMADDR|(col+offset[row]),0);
}
void LCD_Write_NewChar(char c_data)//在当前位置显示
{ LCD_8Bit_Write(c_data,1);
}
void LCD_Write_Char(unsigned char row,unsigned char col,char c_data)
//在指定位置显示
{ LCD_Set_Cursor_Location(row,col); LCD_8Bit_Write(c_data,1);
}
void LCD_Write_String(unsigned char row,unsigned char col,const char *pStr)
//在指定位置显示串
{
	LCD_Set_Cursor_Location(row,col);
	while((*pStr) != '\0')
	{
		LCD_8Bit_Write(*pStr,1);
		pStr ++;
	}
}
#endif /* TWI_LCD_H_ */
主函数：
#include <avr/io.h>
#include "twi_lcd.h"
#include <avr/interrupt.h>
unsigned char counter=1;
ISR(INT0_vect)
{if(counter <20)
	counter++;
	else
	counter = 1;
}
ISR(TIMER1_OVF_vect)
{
	OCR1A = counter * 6;
}
int main(void)
{ unsigned char uc_tmp; LCD_Init();
	DDRB |=(1<<DDRB1);//PB1(OC1A)输出
	ICR1 = 200;/*TOP值*/ OCR1A = 10;//A路比较值
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0);//管脚切换方式
	TCCR1B |= (1<<WGM13)|(1<<CS11);//模式为8，时钟8分频
	TIMSK =(1<<TOIE1);//开启TC1溢出中断
	DDRD &= ~(1<<DDRD2);//PD2(int0)为输入<-tp223
	MCUCR |=((1<<ISC01)|(1<<ISC00));//int0 上升沿触发中断
	GICR |= (1<<INT0);/*允许INT0中断*/ sei(); //开全局中断
	while (1) { uc_tmp = counter;
		LCD_Write_Char(0,6,uc_tmp/10+0x30);
		LCD_Write_NewChar(uc_tmp%10+0x30);
	_delay_ms (2); }
}
5，用MCU控制步进电机的旋转，能调方向：
头文件：#ifndef M_28BYJ48_H_
#define M_28BYJ48_H_ //头文件 "m_28byj48.h"
#ifndef F_CPU
#define F_CPU 1000000UL/*<util/delay.h>需要定义F_CPU参数*/
#endif
#include <util/delay.h> //包含延时函数_delay_ms()和_delay_us()等
#include <avr/io.h>
/* 3种不同驱动方式下28byj48步进电机的控制信号，脉冲数据
* 低4位中bit3控制28byj48的蓝色线(D),bit2-粉(C),bit1-黄(B),bit0-橙(A)*/
const unsigned char
stepper_ph[3][8]={{0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09},//混合8拍
{0x03,0x06,0x0C,0x09},//双4拍
{0x01,0x02,0x04,0x08}};//单4拍
unsigned char stepper_index = 0;//记录并控制步进电机的步伐
/* 28BYJ-48步进电机的控制函数，其参数的作用为：
* phase:选择步进电机的驱动方式，0：8拍，1：双4拍，2：单4拍
* dir:步进电机的转动方向，0：顺时针，1：逆时针
* step:控制步进电机转动多少步（多少个脉冲），0~65535*/
void run_stepper(unsigned char phase,unsigned char dir,unsigned int step)
{ unsigned char ph = phase ? 0x03:0x07;//驱动方式，确定脉冲的选择增量
	unsigned char inc = dir ?0x01:ph; /*逆时针增量为1，顺时针 4拍为3,8拍为7*/
	unsigned int i;//定义循环变量i
	DDRC |=(1<<DDRC3)|(1<<DDRC2)|(1<<DDRC1)|(1<<DDRC0);//PC输出
	for(i=0;i<step;i++)//输出step个脉冲步
	{ stepper_index += inc;//通过增量调整，不断地切换输出脉冲
		stepper_index &= ph; //去掉递增后的无效高位值
		PORTC &=0xf0; //选择相应的控制脉冲通过端口C进行输出
		PORTC |= stepper_ph[phase][stepper_index];
		_delay_us(900);//8拍 _delay_us(1600);//双4拍//_delay_us(2000);//单四拍
	} }
	#endif /* M_28BYJ48_H_ */
主函数：
#include <avr/io.h>
#include "m_28byj48.h"
int main(void)
{ DDRD &=~(1<<DDRD0);//输入：通过PD0连接到电源正极或负极进行
	PORTD |=(1<<PORTD0); //内部上拉
	while (1)
	{ if(PIND & (1<<PIND0))
		run_stepper(0,1,4096);
		//8拍驱动方式，顺时针，转动一周
		else
		run_stepper(0,0,4096);
		//8拍驱动方式，逆时针，转动一周
	}
}
实验收获：
1.用实验板供电时，会拉低供电电压1V：所以会导致转子转不起来，我们需要剪断导线的绝缘外壳，剥开胶套，露出金属丝，并将其缠绕在导线的金属尖端，将导线的头端插入电脑中，利用电脑供电，从而解决电压不够的问题
2.在利用PWM控制直流电机旋转的时候，我们需要连接LCD，且将导线的金属端穿进转子的小孔中
3.在利用MCU控制步进电机旋转调方向时，我们要通过PD0连接到电源的正极或负极来实现，注意不要短路，否则会使步进电机烧糊
	