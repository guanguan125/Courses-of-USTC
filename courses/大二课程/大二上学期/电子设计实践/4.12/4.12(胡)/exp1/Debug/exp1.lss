
exp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d75  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e5  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000698  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e6       	ldi	r30, 0x60	; 96
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	b3 d0       	rcall	.+358    	; 0x1b0 <main>
  4a:	08 c1       	rjmp	.+528    	; 0x25c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <TWI_Init>:
{ LCD_8Bit_Write(c_data,1);
}
void LCD_Write_Char(unsigned char row,unsigned char col,char c_data)
//在指定位置显示
{ LCD_Set_Cursor_Location(row,col); LCD_8Bit_Write(c_data,1);
}
  4e:	11 b8       	out	0x01, r1	; 1
  50:	82 e0       	ldi	r24, 0x02	; 2
  52:	80 b9       	out	0x00, r24	; 0
  54:	84 e0       	ldi	r24, 0x04	; 4
  56:	86 bf       	out	0x36, r24	; 54
  58:	08 95       	ret

0000005a <TWI_Start>:
  5a:	84 ea       	ldi	r24, 0xA4	; 164
  5c:	86 bf       	out	0x36, r24	; 54
  5e:	06 b6       	in	r0, 0x36	; 54
  60:	07 fe       	sbrs	r0, 7
  62:	fd cf       	rjmp	.-6      	; 0x5e <TWI_Start+0x4>
  64:	08 95       	ret

00000066 <TWI_Write>:
  66:	83 b9       	out	0x03, r24	; 3
  68:	84 e8       	ldi	r24, 0x84	; 132
  6a:	86 bf       	out	0x36, r24	; 54
  6c:	06 b6       	in	r0, 0x36	; 54
  6e:	07 fe       	sbrs	r0, 7
  70:	fd cf       	rjmp	.-6      	; 0x6c <TWI_Write+0x6>
  72:	08 95       	ret

00000074 <TWI_Write_LCD>:
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
  78:	f0 df       	rcall	.-32     	; 0x5a <TWI_Start>
  7a:	81 b1       	in	r24, 0x01	; 1
  7c:	88 7f       	andi	r24, 0xF8	; 248
  7e:	88 30       	cpi	r24, 0x08	; 8
  80:	89 f4       	brne	.+34     	; 0xa4 <TWI_Write_LCD+0x30>
  82:	8e e4       	ldi	r24, 0x4E	; 78
  84:	f0 df       	rcall	.-32     	; 0x66 <TWI_Write>
  86:	81 b1       	in	r24, 0x01	; 1
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	88 31       	cpi	r24, 0x18	; 24
  8c:	69 f4       	brne	.+26     	; 0xa8 <TWI_Write_LCD+0x34>
  8e:	8c 2f       	mov	r24, r28
  90:	88 60       	ori	r24, 0x08	; 8
  92:	e9 df       	rcall	.-46     	; 0x66 <TWI_Write>
  94:	81 b1       	in	r24, 0x01	; 1
  96:	88 7f       	andi	r24, 0xF8	; 248
  98:	88 32       	cpi	r24, 0x28	; 40
  9a:	41 f4       	brne	.+16     	; 0xac <TWI_Write_LCD+0x38>
  9c:	84 e9       	ldi	r24, 0x94	; 148
  9e:	86 bf       	out	0x36, r24	; 54
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	05 c0       	rjmp	.+10     	; 0xae <TWI_Write_LCD+0x3a>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	03 c0       	rjmp	.+6      	; 0xae <TWI_Write_LCD+0x3a>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <TWI_Write_LCD+0x3a>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <LCD_4Bit_Write>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	de df       	rcall	.-68     	; 0x74 <TWI_Write_LCD>
  b8:	00 00       	nop
  ba:	8c 2f       	mov	r24, r28
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	da df       	rcall	.-76     	; 0x74 <TWI_Write_LCD>
  c0:	00 00       	nop
  c2:	8c 2f       	mov	r24, r28
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	d6 df       	rcall	.-84     	; 0x74 <TWI_Write_LCD>
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_4Bit_Write+0x18>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_4Bit_Write+0x1e>
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <LCD_8Bit_Write>:
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c8 2f       	mov	r28, r24
  da:	d6 2f       	mov	r29, r22
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	86 2b       	or	r24, r22
  e0:	e8 df       	rcall	.-48     	; 0xb2 <LCD_4Bit_Write>
  e2:	20 e1       	ldi	r18, 0x10	; 16
  e4:	c2 9f       	mul	r28, r18
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	8d 2b       	or	r24, r29
  ec:	e2 df       	rcall	.-60     	; 0xb2 <LCD_4Bit_Write>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_Init>:
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Init+0x4>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Init+0xa>
  fe:	00 00       	nop
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	d7 df       	rcall	.-82     	; 0xb2 <LCD_4Bit_Write>
 104:	84 e6       	ldi	r24, 0x64	; 100
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Init+0x14>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Init+0x1a>
 10e:	00 00       	nop
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	cf df       	rcall	.-98     	; 0xb2 <LCD_4Bit_Write>
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Init+0x24>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Init+0x2a>
 11e:	00 00       	nop
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	c7 df       	rcall	.-114    	; 0xb2 <LCD_4Bit_Write>
 124:	92 e3       	ldi	r25, 0x32	; 50
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Init+0x32>
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	c2 df       	rcall	.-124    	; 0xb2 <LCD_4Bit_Write>
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	d0 df       	rcall	.-96     	; 0xd4 <LCD_8Bit_Write>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	cd df       	rcall	.-102    	; 0xd4 <LCD_8Bit_Write>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	ca df       	rcall	.-108    	; 0xd4 <LCD_8Bit_Write>
 140:	83 ef       	ldi	r24, 0xF3	; 243
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Init+0x50>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Init+0x56>
 14a:	00 00       	nop
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	c1 df       	rcall	.-126    	; 0xd4 <LCD_8Bit_Write>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	be df       	rcall	.-132    	; 0xd4 <LCD_8Bit_Write>
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Init+0x68>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Init+0x6e>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <LCD_Set_Cursor_Location>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <LCD_Set_Cursor_Location+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	90 e4       	ldi	r25, 0x40	; 64
 174:	9a 83       	std	Y+2, r25	; 0x02
 176:	fe 01       	movw	r30, r28
 178:	e8 0f       	add	r30, r24
 17a:	f1 1d       	adc	r31, r1
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	86 0f       	add	r24, r22
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 68       	ori	r24, 0x80	; 128
 184:	a7 df       	rcall	.-178    	; 0xd4 <LCD_8Bit_Write>
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LCD_Write_String>:
void LCD_Write_String(unsigned char row,unsigned char col,const char *pStr)
//在指定位置显示串
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ea 01       	movw	r28, r20
	LCD_Set_Cursor_Location(row,col);
 196:	e7 df       	rcall	.-50     	; 0x166 <LCD_Set_Cursor_Location>
	while((*pStr) != '\0')
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <LCD_Write_String+0x1a>
 19e:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_8Bit_Write(*pStr,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	98 df       	rcall	.-208    	; 0xd4 <LCD_8Bit_Write>
}
void LCD_Write_String(unsigned char row,unsigned char col,const char *pStr)
//在指定位置显示串
{
	LCD_Set_Cursor_Location(row,col);
	while((*pStr) != '\0')
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <LCD_Write_String+0x10>
	{
		LCD_8Bit_Write(*pStr,1);
		pStr ++;
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <main>:

#include <avr/io.h>
#include <util/twi.h> //TWI接口状态码定义等
#include "twi_lcd.h"
int main(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <main+0x6>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <main+0x8>
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	unsigned char counter=0;
	unsigned char sla_addr = 0x33<<1;//从机地址为0x33(最低位为开启广播)
	unsigned char chs[4];
	unsigned char d_t=0;
	unsigned int i=0;
	TWCR=0x0;//禁止TWI接口
 1bc:	16 be       	out	0x36, r1	; 54
	DDRC &=~((1<<DDRC5)|(1<<DDRC4));//PC5/4输入
 1be:	84 b3       	in	r24, 0x14	; 20
 1c0:	8f 7c       	andi	r24, 0xCF	; 207
 1c2:	84 bb       	out	0x14, r24	; 20
	PORTC |=(1<<PORTC5)|(1<<PORTC4);//SCL/SDA内部上拉
 1c4:	85 b3       	in	r24, 0x15	; 21
 1c6:	80 63       	ori	r24, 0x30	; 48
 1c8:	85 bb       	out	0x15, r24	; 21
	TWBR = 0x02;//fscl=50KHz
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;//无预分频
 1ce:	11 b8       	out	0x01, r1	; 1
	
	
	TWAR = sla_addr;//设置从机地址
 1d0:	86 e6       	ldi	r24, 0x66	; 102
 1d2:	82 b9       	out	0x02, r24	; 2
	TWI_Init();
 1d4:	3c df       	rcall	.-392    	; 0x4e <TWI_Init>
	LCD_Init();
 1d6:	8e df       	rcall	.-228    	; 0xf4 <LCD_Init>
#include <avr/io.h>
#include <util/twi.h> //TWI接口状态码定义等
#include "twi_lcd.h"
int main(void)
{
	unsigned char counter=0;
 1d8:	d1 2c       	mov	r13, r1
	
	TWAR = sla_addr;//设置从机地址
	TWI_Init();
	LCD_Init();
	while (1)
	{ TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//清标志，开TWI，自动应答
 1da:	0f 2e       	mov	r0, r31
 1dc:	f4 ec       	ldi	r31, 0xC4	; 196
 1de:	ef 2e       	mov	r14, r31
 1e0:	f0 2d       	mov	r31, r0
			{ counter = TWDR; //收到的数据存储在counter里
				TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//
				
			}
		}
		TWCR = (1<<TWINT);//清除TWINT标志，关闭TWI接口
 1e2:	68 94       	set
 1e4:	cc 24       	eor	r12, r12
 1e6:	c7 f8       	bld	r12, 7
 1e8:	8e 01       	movw	r16, r28
 1ea:	0f 5f       	subi	r16, 0xFF	; 255
 1ec:	1f 4f       	sbci	r17, 0xFF	; 255
		d_t = counter;
		for(i=0;i<4;i++)//1个整数转换为4位字符
		{
			chs[3-i]=d_t%10+0x30;
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fd ec       	ldi	r31, 0xCD	; 205
 1f2:	ff 2e       	mov	r15, r31
 1f4:	f0 2d       	mov	r31, r0
	
	TWAR = sla_addr;//设置从机地址
	TWI_Init();
	LCD_Init();
	while (1)
	{ TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//清标志，开TWI，自动应答
 1f6:	e6 be       	out	0x36, r14	; 54
		
		while(!(TWCR & (1<<TWINT)));//等待接收sla+w
 1f8:	06 b6       	in	r0, 0x36	; 54
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <main+0x48>
		
		if((TWSR & 0xf8)==TW_SR_SLA_ACK)//sla+W已收到，已发ACK
 1fe:	81 b1       	in	r24, 0x01	; 1
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 36       	cpi	r24, 0x60	; 96
 204:	51 f4       	brne	.+20     	; 0x21a <main+0x6a>
		{ TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//清除标志，开启ACK
 206:	e6 be       	out	0x36, r14	; 54
			while(!(TWCR & (1<<TWINT)));//等待接收数据
 208:	06 b6       	in	r0, 0x36	; 54
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <main+0x58>
			if((TWSR & 0xf8)==TW_SR_DATA_ACK)//数据已收到，已发ACK
 20e:	81 b1       	in	r24, 0x01	; 1
 210:	88 7f       	andi	r24, 0xF8	; 248
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	11 f4       	brne	.+4      	; 0x21a <main+0x6a>
			{ counter = TWDR; //收到的数据存储在counter里
 216:	d3 b0       	in	r13, 0x03	; 3
				TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);//
 218:	e6 be       	out	0x36, r14	; 54
				
			}
		}
		TWCR = (1<<TWINT);//清除TWINT标志，关闭TWI接口
 21a:	c6 be       	out	0x36, r12	; 54
 21c:	fe 01       	movw	r30, r28
 21e:	35 96       	adiw	r30, 0x05	; 5
		d_t = counter;
 220:	8d 2d       	mov	r24, r13
		for(i=0;i<4;i++)//1个整数转换为4位字符
		{
			chs[3-i]=d_t%10+0x30;
 222:	8f 9d       	mul	r24, r15
 224:	91 2d       	mov	r25, r1
 226:	11 24       	eor	r1, r1
 228:	96 95       	lsr	r25
 22a:	96 95       	lsr	r25
 22c:	96 95       	lsr	r25
 22e:	39 2f       	mov	r19, r25
 230:	33 0f       	add	r19, r19
 232:	23 2f       	mov	r18, r19
 234:	22 0f       	add	r18, r18
 236:	22 0f       	add	r18, r18
 238:	23 0f       	add	r18, r19
 23a:	82 1b       	sub	r24, r18
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	82 93       	st	-Z, r24
			d_t=d_t/10;
 240:	89 2f       	mov	r24, r25
				
			}
		}
		TWCR = (1<<TWINT);//清除TWINT标志，关闭TWI接口
		d_t = counter;
		for(i=0;i<4;i++)//1个整数转换为4位字符
 242:	e0 17       	cp	r30, r16
 244:	f1 07       	cpc	r31, r17
 246:	69 f7       	brne	.-38     	; 0x222 <main+0x72>
		{
			chs[3-i]=d_t%10+0x30;
			d_t=d_t/10;
		}
		LCD_Write_String(0,2,"Touchpad Times:");
 248:	40 e6       	ldi	r20, 0x60	; 96
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	9f df       	rcall	.-194    	; 0x190 <LCD_Write_String>
		LCD_Write_String(1,8,chs); //在LCD上显示数据(仅低4位)
 252:	a8 01       	movw	r20, r16
 254:	68 e0       	ldi	r22, 0x08	; 8
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	9b df       	rcall	.-202    	; 0x190 <LCD_Write_String>
		
	} //while结束
 25a:	cd cf       	rjmp	.-102    	; 0x1f6 <main+0x46>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
