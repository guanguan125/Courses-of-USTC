
exp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054d  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004de  00000000  00000000  0000073d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b7  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000011d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1a d0       	rcall	.+52     	; 0x78 <main>
  44:	4e c0       	rjmp	.+156    	; 0xe2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
#include <avr/interrupt.h>
#define F_CPU 1000000UL
#include <util/delay.h>
unsigned char counter=0;
ISR(INT0_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	if(counter <15)
  54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  58:	8f 30       	cpi	r24, 0x0F	; 15
  5a:	20 f4       	brcc	.+8      	; 0x64 <__vector_1+0x1c>
	counter++;
  5c:	8f 5f       	subi	r24, 0xFF	; 255
  5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  62:	02 c0       	rjmp	.+4      	; 0x68 <__vector_1+0x20>
	else
	counter = 0;
  64:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//清标志，开TWI，发START
  68:	84 ea       	ldi	r24, 0xA4	; 164
  6a:	86 bf       	out	0x36, r24	; 54
}
  6c:	8f 91       	pop	r24
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <main>:
int main(void)
{
	unsigned char sla_w = 0x33<<1; //从MCU地址为0x33(位0为开启广播)，写从MCU
	DDRC &= ~((1<<DDRC5)|(1<<DDRC4));//PC5/4为输入
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	8f 7c       	andi	r24, 0xCF	; 207
  7c:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PORTC5)|(1<<PORTC4);//开启内部上拉
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	80 63       	ori	r24, 0x30	; 48
  82:	85 bb       	out	0x15, r24	; 21
	TWBR = 0x02;//fscl=50KHz
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;//无预分频
  88:	11 b8       	out	0x01, r1	; 1
	DDRD &= ~(1<<DDRD2);//PD2(int0) 接触摸开关的sig管脚
  8a:	8a 98       	cbi	0x11, 2	; 17
	MCUCR |=((1<<ISC01)|(1<<ISC00));//int0管脚是上升沿触发中断INT0
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);//允许INT0外部中断
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	sei(); //开启全局中断SREG(I)=1
  98:	78 94       	sei
	while (1)
	{ TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//清标志，开TWI，发START
  9a:	24 ea       	ldi	r18, 0xA4	; 164
		while(!(TWCR & (1<<TWINT)));//等待START发出
		if((TWSR & 0xf8) == TW_START)//START已发出
		{ TWDR=sla_w;//发送SLA+W
  9c:	46 e6       	ldi	r20, 0x66	; 102
			TWCR=(1<<TWINT)|(1<<TWEN);//清除标志，并发送sla+w
  9e:	34 e8       	ldi	r19, 0x84	; 132
			{ 
				TWDR=counter;//发送开关次数
				TWCR=(1<<TWINT)|(1<<TWEN);//清除标志，并发送数据
				while(!(TWCR & (1<<TWINT)));//等待数据发出
				if((TWSR & 0xf8)==TW_MT_DATA_ACK)//数据已发出
				TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);//清标志，发STOP
  a0:	54 e9       	ldi	r21, 0x94	; 148
			}
		}
		TWCR=(1<<TWINT);//清除标志位，禁止TWI
  a2:	90 e8       	ldi	r25, 0x80	; 128
	DDRD &= ~(1<<DDRD2);//PD2(int0) 接触摸开关的sig管脚
	MCUCR |=((1<<ISC01)|(1<<ISC00));//int0管脚是上升沿触发中断INT0
	GICR |= (1<<INT0);//允许INT0外部中断
	sei(); //开启全局中断SREG(I)=1
	while (1)
	{ TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//清标志，开TWI，发START
  a4:	26 bf       	out	0x36, r18	; 54
		while(!(TWCR & (1<<TWINT)));//等待START发出
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <main+0x2e>
		if((TWSR & 0xf8) == TW_START)//START已发出
  ac:	81 b1       	in	r24, 0x01	; 1
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	a9 f4       	brne	.+42     	; 0xde <main+0x66>
		{ TWDR=sla_w;//发送SLA+W
  b4:	43 b9       	out	0x03, r20	; 3
			TWCR=(1<<TWINT)|(1<<TWEN);//清除标志，并发送sla+w
  b6:	36 bf       	out	0x36, r19	; 54
			while(!(TWCR & (1<<TWINT)));//等待sla+w发出
  b8:	06 b6       	in	r0, 0x36	; 54
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x40>
			if((TWSR & 0xf8)==TW_MT_SLA_ACK)//sla+W已发出
  be:	81 b1       	in	r24, 0x01	; 1
  c0:	88 7f       	andi	r24, 0xF8	; 248
  c2:	88 31       	cpi	r24, 0x18	; 24
  c4:	61 f4       	brne	.+24     	; 0xde <main+0x66>
			{ 
				TWDR=counter;//发送开关次数
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	83 b9       	out	0x03, r24	; 3
				TWCR=(1<<TWINT)|(1<<TWEN);//清除标志，并发送数据
  cc:	36 bf       	out	0x36, r19	; 54
				while(!(TWCR & (1<<TWINT)));//等待数据发出
  ce:	06 b6       	in	r0, 0x36	; 54
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0x56>
				if((TWSR & 0xf8)==TW_MT_DATA_ACK)//数据已发出
  d4:	81 b1       	in	r24, 0x01	; 1
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	88 32       	cpi	r24, 0x28	; 40
  da:	09 f4       	brne	.+2      	; 0xde <main+0x66>
				TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);//清标志，发STOP
  dc:	56 bf       	out	0x36, r21	; 54
			}
		}
		TWCR=(1<<TWINT);//清除标志位，禁止TWI
  de:	96 bf       	out	0x36, r25	; 54
	} //while结束
  e0:	e1 cf       	rjmp	.-62     	; 0xa4 <main+0x2c>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
